{"version":3,"sources":["components/ShowMeasures.jsx","img/information.svg","utils/date.js","components/CommandPanel.jsx","components/ShowTime.jsx","components/Map.jsx","components/Graphs.jsx","components/GraphContainer.jsx","components/WelcomeModal.jsx","Platform.jsx","utils/constants.js"],"names":["ContainerAll","styled","div","_templateObject","props","show","CloseDiv","_templateObject2","ContainerMeasures","_templateObject3","Header","_templateObject4","Button","button","_templateObject5","color","propTypes","PropTypes","string","GraphButton","_ref","onClick","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","display","textAlign","alignItems","ShowMeasures","_ref2","station","change","showGraphs","name","filter","p","map","key","UNITS","window","scrollTo","top","document","body","scrollHeight","behavior","module","exports","__webpack_require__","parseDate","t","day","getDate","month","getMonth","hour","getHours","minutes","getMinutes","concat","getFullYear","texts","withConfig","displayName","componentId","heightNav","number","ContainerSettings","bool","ShowSettingsButton","hasLoaded","HeaderParameter","Info","text","_useState","useState","_useState2","Object","slicedToArray","showInfo","setShowInfo","react_default","position","onMouseEnter","onMouseLeave","src","infologo","alt","width","height","verticalAlign","CommandPanel_InfoSpan","InfoSpan","background","opacity","zIndex","left","bottom","padding","fontWeight","fontSize","maxWidth","CommandPanel","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showSettings","date","time","error","changeDate","bind","assertThisInitialized","_this2","fetch","URL","then","res","json","parsed","Date","setState","_this3","epoch","getTime","length","setTime","_this4","_this$props","parameter","threeD","scale3D","showStation","mapStyle","_parseDate","_parseDate2","maxDate","maxTime","paramList","PARAMS","primary","prev","CommandPanel_Info","dist_default","options","onChange","e","value","placeholder","type","id","min","max","currentTarget","step","marginLeft","checked","_StyledInput","parseInt","disabled","_css","Component","ShowTimeContainer","ShowTime_templateObject","ModifiedButton","TimeDiv","ShowTime","updateTime","toLocaleString","justifyContent","Map","fullStations","stations","isLoading","data","colorMap","COLOR_MAP","mapRef","React","createRef","deckRef","_renderLayers","_renderTooltip","_getFillColor","setAllData","fetchNewData","prevProps","interpolData","current","deck","setProps","layers","url","arguments","undefined","mes","x","objectSpread","m","toConsumableArray","triangles","Delaunator","from","longitude","latitude","trianglesCoordinates","i","b","c","Math","abs","push","minMax","apply","PolygonLayer","pickable","stroked","filled","wireframe","elevationScale","lineWidthMinPixels","getPolygon","d","altitude","getFillColor","getLineColor","getLineWidth","updateTriggers","ScatterplotLayer","radiusScale","getPosition","getRadius","getPolygonOffset","onHover","info","hoveredObject","object","pointerX","pointerY","y","getCursor","instanceRadius","temp","param","_this$state$minMax","floor","opa","cm","pointerEvents","backgroundColor","_this5","dist_esm","ref","initialViewState","zoom","minZoom","maxZoom","pitch","bearing","controller","esm","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","ORANGE","GREEN","styles","axisX","axis","stroke","strokeWidth","ticks","tickLabels","fill","fontFamily","axisYL","grid","axisYR","lineL","parent","border","lineR","Null","ChartContainer","createContainer","GraphComp","_ref3","parameterL","parameterR","minmax","showR","Cursor","active","len","ind","round","found","find","val","textAnchor","offX","offY","uL","uR","toLocaleDateString","year","toLocaleTimeString","minute","toFixed","victory_chart","scale","animate","duration","onLoad","boxShadow","containerComponent","cursorLabel","cursorLabelComponent","cursorLabelOffset","cursorComponent","victory_label","PRETTY_PARAMS","victory_axis","tickCount","offsetY","dependentAxis","orientation","tickValues","tickFormat","parseFloat","victory_line","domain","interpolation","ContainerDiv","GraphContainer_templateObject","paramColumn","flexDirection","margin","stationName","timeInterval","firstParam","secondParam","marginTop","Graphs","okParams","fetchData","clickedStation","prevState","station_id","apiEndPoint","forEach","_minmax$p$value","isFinite","_this$state","flexGrow","components_Graphs","TIME_PARAMS","toString","label","title","flex","parag","WelcomeModal","showModal","lib_default","overlay","content","isOpen","contentLabel","ariaHideApp","getModal","localStorage","getItem","setItem","Platform","refNav","offsetHeight","defineProperty","Fragment","SwissApp","NavBar","addRef","alwaysDisplay","notHome","demo","maxHeight","components_CommandPanel","components_Map","components_ShowTime","components_WelcomeModal","GraphContainer","__webpack_exports__","PARAMS_W_ALT","jet","require","coolwarm","plasma","temperature","pressure_altitude","pressure_qnh","humidity","wind_mean_speed","wind_max_speed","rain"],"mappings":"0xDAMA,IAAMA,EAAeC,IAAOC,IAAVC,IASL,SAAAC,GAAK,OAAKA,EAAMC,KAAO,EAAI,GACzB,SAAAD,GAAK,OAAKA,EAAMC,KAAO,WAAa,aAO7CC,EAAWL,IAAOC,IAAVK,KAgBRC,EAAoBP,IAAOC,IAAVO,KAIjBC,EAAST,IAAOC,IAAVS,KAONC,EAASX,IAAOY,OAAVC,IAOU,SAAAV,GAAK,OAAIA,EAAMW,OAAS,uBAItB,SAAAX,GAAK,OAAIA,EAAMW,OAAS,wBAKhDH,EAAOI,UAAY,CACjBD,MAAOE,IAAUC,QAGnB,IAAMC,EAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,UAAW,SAAUC,WAAY,WAC9DN,EAAAC,EAAAC,cAACZ,EAAD,CAAQS,QAASA,GAAjB,YA4CWQ,IAxCM,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,QAASC,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,WACnC5B,EAAO0B,EAAQG,KAanB,OACEZ,EAAAC,EAAAC,cAACxB,EAAD,CAAcK,KAAMA,GAClBiB,EAAAC,EAAAC,cAAClB,EAAD,CAAUe,QAAS,WAAOW,EAAO,iBAAkB,IAAIA,EAAO,cAAc,MAC5EV,EAAAC,EAAAC,cAACd,EAAD,KAASqB,EAAQG,MAdF,CACjB,CAAC,WAAY,YACb,CAAC,cAAe,eAChB,CAAC,oBAAqB,uBACtB,CAAC,eAAgB,qBACjB,CAAC,kBAAmB,mBACpB,CAAC,iBAAkB,kBACnB,CAAC,WAAY,YACb,CAAC,OAAQ,kBAQJC,OAAO,SAAAC,GAAC,OAAsB,OAAlBL,EAAQK,EAAE,MACtBC,IAAI,SAAAD,GAAC,OACJd,EAAAC,EAAAC,cAAChB,EAAD,CAAmB8B,IAAKF,EAAE,IACxBd,EAAAC,EAAAC,cAAA,WAAMY,EAAE,IACRd,EAAAC,EAAAC,cAAA,WACGO,EAAQK,EAAE,IADb,IACmBG,IAAMH,EAAE,QAKhC/B,GAAQiB,EAAAC,EAAAC,cAACL,EAAD,CAAaE,QAAS,WACzBY,EACFO,OAAOC,SAAS,CAAEC,IAAKC,SAASC,KAAKC,aAAcC,SAAU,WAE7Dd,EAAO,cAAc,o7iBC7G/Be,EAAAC,QAAiBC,EAAAb,EAAuB,gTCuBzBc,MAvBf,SAAmBC,GACjB,IAAIC,EAAMD,EAAEE,UACRC,EAAQH,EAAEI,WAAW,EACrBC,EAAOL,EAAEM,WACTC,EAAUP,EAAEQ,aAgBhB,OAdIP,EAAM,KACRA,EAAM,IAAMA,GAEVE,EAAQ,KACVA,EAAQ,IAAMA,GAEZE,EAAO,KACTA,EAAO,IAAMA,IARfE,GAAqBA,EAAQ,IAUf,KACZA,EAAU,IAAMA,GAIX,CAFG,GAAAE,OAAMT,EAAEU,cAAR,KAAAD,OAAyBN,EAAzB,KAAAM,OAAkCR,GAClC,GAAAQ,OAAMJ,EAAN,KAAAI,OAAcF,mJCN1B,IAAMI,EACO,4CADPA,EAEE,iEAFFA,EAGI,oHAHJA,EAIK,qCAJLA,EAKM,2DALNA,EAMG,qCAGH9D,EAAeC,IAAOC,IAAV6D,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAGhE,CAAH,gHAET,SAAAG,GAAK,OAAIA,EAAM8D,WAMJ,SAAA9D,GAAK,OAAKA,EAAMC,KAAO,OAAS,SAGpDL,EAAagB,UAAY,CACvBkD,UAAWjD,IAAUkD,QAGvB,IAAMC,EAAoBnE,IAAOC,IAAV6D,WAAA,CAAAC,YAAA,kCAAAC,YAAA,gBAAGhE,CAAH,uMAMV,SAAAG,GAAK,OAAKA,EAAMC,KAAO,EAAI,IAMxC+D,EAAkBpD,UAAY,CAC5BX,KAAMY,IAAUoD,MAGlB,IAAMC,EAAqBrE,YAAOW,KAAVmD,WAAA,CAAAC,YAAA,mCAAAC,YAAA,gBAAGhE,CAAH,gHAMX,SAAAG,GAAK,OAAKA,EAAMmE,UAAY,EAAI,IAIvCC,EAAkBvE,IAAOmC,EAAV2B,WAAA,CAAAC,YAAA,gCAAAC,YAAA,gBAAGhE,CAAH,sBAIfwE,EAAO,SAAArD,GAAc,IAAXsD,EAAWtD,EAAXsD,KAAWC,EACOC,oBAAS,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACRI,EADQJ,EAAA,GAEzB,OACEK,EAAA3D,EAAAC,cAAA,QAAMC,MAAO,CAAC0D,SAAS,YAAaC,aAAc,kBAAMH,GAAY,IAAOI,aAAc,kBAAMJ,GAAY,KACzGC,EAAA3D,EAAAC,cAAA,OACE8D,IAAKC,IACLC,IAAI,OACJC,MAAM,OACNC,OAAO,OACPjE,MAAO,CAAEkE,cAAe,cAEzBX,GAAYE,EAAA3D,EAAAC,cAACoE,EAAD,CAAUlB,KAAMA,MAK7BmB,EAAW,SAAA/D,GAAA,IAAG4C,EAAH5C,EAAG4C,KAAH,OACfQ,EAAA3D,EAAAC,cAAA,QACEC,MAAO,CACLC,QAAS,eACToE,WAAY,gBACZ/E,MAAO,QACPgF,QAAS,GACTZ,SAAU,WACVa,OAAQ,IACRC,KAAM,MACNC,OAAQ,MACRC,QAAS,MACTC,WAAW,IACXC,SAAU,OACVZ,MAAO,QACPa,SAAU,SAGX5B,IA0OU6B,cArOb,SAAAA,EAAYnG,GAAO,IAAAoG,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAH,IACjBC,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAAyB,GAAAM,KAAAH,KAAMtG,KACD0G,MAAQ,CACXC,cAAc,EACdC,KAAM,GACNC,KAAM,GACNC,OAAO,GAETV,EAAKW,WAAaX,EAAKW,WAAWC,KAAhBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KARDA,mFAWC,IAAAc,EAAAZ,KAGlBa,MAAMC,IAAI,iBACPC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJ,IAAME,EAAS1E,EAAU,IAAI2E,KAAKH,EAAIT,KAAO,MAC7CK,EAAKQ,SAAS,CAAEd,KAAMY,EAAO,GAAIX,KAAMW,EAAO,4CAIvC,IAAAG,EAAArB,KAKLsB,EACJ,IAAIH,KAAKnB,KAAKI,MAAME,KAAO,IAAMN,KAAKI,MAAMG,MAAMgB,UAAY,IAChEV,MAAMC,IAAG,uBAAA5D,OAAwBoE,EAAxB,SAAApE,OAAqCoE,IAC3CP,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACAA,EAAIQ,OAAS,GACfH,EAAK3H,MAAM+H,QAAQJ,EAAKjB,MAAME,KAAO,IAAMe,EAAKjB,MAAMG,MAAM,GAC5Dc,EAAKD,SAAS,CAAEZ,OAAO,KAEvBa,EAAKD,SAAS,CAAEZ,OAAO,uCAKtB,IAAAkB,EAAA1B,KAAA2B,EAUH3B,KAAKtG,MARPkI,EAFKD,EAELC,UACAC,EAHKF,EAGLE,OACAC,EAJKH,EAILG,QACAzC,EALKsC,EAKLtC,QACA0C,EANKJ,EAMLI,YACAC,EAPKL,EAOLK,SACA1G,EARKqG,EAQLrG,OACAuC,EATK8D,EASL9D,UATKoE,EAYoBzF,EAAU,IAAI2E,MAZlCe,EAAA9D,OAAAC,EAAA,EAAAD,CAAA6D,EAAA,GAYAE,EAZAD,EAAA,GAYSE,EAZTF,EAAA,GAaDG,EAAYC,IAElB,OACE9D,EAAA3D,EAAAC,cAACxB,EAAD,CACEkE,UAAWwC,KAAKtG,MAAM8D,UAAY,EAClC7D,KAAMqG,KAAKI,MAAMC,cAEjB7B,EAAA3D,EAAAC,cAAC8C,EAAD,CACEC,UAAWA,EACX0E,SAAO,EACP5H,QAAS,kBACP+G,EAAKN,SAAS,SAAAoB,GAAI,MAAK,CAAEnC,cAAemC,EAAKnC,kBAJjD,YAUA7B,EAAA3D,EAAAC,cAAC4C,EAAD,CAAmB/D,KAAMqG,KAAKI,MAAMC,cAClC7B,EAAA3D,EAAAC,cAACgD,EAAD,kBACYU,EAAA3D,EAAAC,cAAC2H,EAAD,CAAMzE,KAAMZ,KAExBoB,EAAA3D,EAAAC,cAAC4H,EAAA7H,EAAD,CACE8H,QAASN,EACTO,SAAU,SAAAC,GAAC,OAAIvH,EAAO,YAAauH,EAAEC,QACrCA,MAAOlB,EACPmB,YAAanB,IAGfpD,EAAA3D,EAAAC,cAACgD,EAAD,yBAAkCU,EAAA3D,EAAAC,cAAC2H,EAAD,CAAMzE,KAAMZ,KAC9CoB,EAAA3D,EAAAC,cAAA,WACE0D,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,OACLC,GAAG,mBACHzH,KAAK,mBACLsH,MAAO9C,KAAKI,MAAME,KAClB4C,IAAI,aACJC,IAAKhB,EACLS,SAAU,SAAAC,GAAC,OAAInB,EAAKN,SAAS,CAAEd,KAAMuC,EAAEO,cAAcN,WAGvDtE,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,OACLC,GAAG,mBACHzH,KAAK,mBACLsH,MAAO9C,KAAKI,MAAMG,KAClB2C,IAAI,QACJC,IAAKf,EACLiB,KAAK,MACLT,SAAU,SAAAC,GAAC,OAAInB,EAAKN,SAAS,CAAEb,KAAMsC,EAAEO,cAAcN,WAEvDtE,EAAA3D,EAAAC,cAAA,WACE0D,EAAA3D,EAAAC,cAAA,UAAQH,QAASqF,KAAKS,YAAtB,YACAjC,EAAA3D,EAAAC,cAAA,QAAMC,MAAO,CAAEuI,WAAY,MAAOjJ,MAAO,QACtC2F,KAAKI,MAAMI,MAAQ,gBAAkB,MAK5ChC,EAAA3D,EAAAC,cAACgD,EAAD,WAAoBU,EAAA3D,EAAAC,cAAC2H,EAAD,CAAMzE,KAAMZ,KAChCoB,EAAA3D,EAAAC,cAAA,WACE0D,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,MACNS,QAAS1B,EACTe,SAAU,SAAAC,GAAC,OAAIvH,EAAO,SAAoC,QAA1BuH,EAAEO,cAAcN,UALpD,MAQEtE,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,KACNS,SAAU1B,EACVe,SAAU,SAAAC,GAAC,OAAIvH,EAAO,SAAoC,QAA1BuH,EAAEO,cAAcN,UAZpD,KAeEtE,EAAA3D,EAAAC,cAAA0I,EAAA,CAIER,KAAK,QACLE,IAAI,IACJC,IAAI,KACJL,MAAOhB,EACPc,SAAU,SAAAC,GAAC,OAAIvH,EAAO,UAAWmI,SAASZ,EAAEO,cAAcN,SAC1DO,KAAK,IACLK,UAAW7B,EAVb8B,KAEe9B,EAAS,EAAI,KAY9BrD,EAAA3D,EAAAC,cAACgD,EAAD,gBAAyBU,EAAA3D,EAAAC,cAAC2H,EAAD,CAAMzE,KAAMZ,KACrCoB,EAAA3D,EAAAC,cAAA,WACE0D,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLE,IAAI,IACJC,IAAI,MACJL,MAAOzD,EACPuD,SAAU,SAAAC,GAAC,OAAIvH,EAAO,UAAWmI,SAASZ,EAAEO,cAAcN,SAC1DO,KAAK,OAIT7E,EAAA3D,EAAAC,cAACgD,EAAD,sBAA+BU,EAAA3D,EAAAC,cAAC2H,EAAD,CAAMzE,KAAMZ,KAC3CoB,EAAA3D,EAAAC,cAAA,WACE0D,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,MACNS,QAASxB,EACTa,SAAU,SAAAC,GAAC,OACTvH,EAAO,cAAyC,QAA1BuH,EAAEO,cAAcN,UAN5C,MAUEtE,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,KACNS,SAAUxB,EACVa,SAAU,SAAAC,GAAC,OACTvH,EAAO,cAAyC,QAA1BuH,EAAEO,cAAcN,UAf5C,MAqBAtE,EAAA3D,EAAAC,cAACgD,EAAD,kBAA2BU,EAAA3D,EAAAC,cAAC2H,EAAD,CAAMzE,KAAMZ,KACvCoB,EAAA3D,EAAAC,cAAA,WACE0D,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,QACNS,QAAsB,UAAbvB,EACTY,SAAU,SAAAC,GAAC,OAAIvH,EAAO,WAAYuH,EAAEO,cAAcN,UALtD,QAQEtE,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,OACNS,QAAsB,SAAbvB,EACTY,SAAU,SAAAC,GAAC,OAAIvH,EAAO,WAAYuH,EAAEO,cAAcN,UAZtD,OAeEtE,EAAA3D,EAAAC,cAAA,SACEkI,KAAK,QACLF,MAAM,QACNS,QAAsB,UAAbvB,EACTY,SAAU,SAAAC,GAAC,OAAIvH,EAAO,WAAYuH,EAAEO,cAAcN,UAnBtD,kBAlLiBc,0nBCpG3B,IAAMC,EAAoBtK,IAAOC,IAAVsK,IAOd,SAAApK,GAAK,OAAIA,EAAMsF,SAOlB+E,EAAiBxK,YAAOW,IAAPX,CAAHM,IAGP,SAAAH,GAAK,OAAIA,EAAMC,KAAO,EAAI,IAGjCqK,EAAUzK,IAAOC,IAAVO,IACA,SAAAL,GAAK,OAAIA,EAAMC,KAAO,EAAI,IAiBxBsK,EAdE,SAAAvJ,GAAgC,IAA9BsE,EAA8BtE,EAA9BsE,OAAQuB,EAAsB7F,EAAtB6F,KAAM2D,EAAgBxJ,EAAhBwJ,WAC/B,OACE1F,EAAA3D,EAAAC,cAAC+I,EAAD,CAAmB7E,OAAQA,GACzBR,EAAA3D,EAAAC,cAAA,OAAKC,MAAO,CAACV,MAAM,gBAAgBqF,WAAW,QAA9C,wBACAlB,EAAA3D,EAAAC,cAACkJ,EAAD,CAASrK,KAAM4G,GAAOA,EAAOA,EAAK4D,eAAe,SAAU,KAC3D3F,EAAA3D,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAQ,OAAOE,WAAW,SAASkJ,eAAe,WAC7D5F,EAAA3D,EAAAC,cAACiJ,EAAD,CAAgBpK,KAAM4G,EAAM5F,QAASuJ,GAArC,2DCsQOG,eA7Rb,SAAAA,EAAY3K,GAAO,IAAAoG,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAqE,IACjBvE,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAAiG,GAAAlE,KAAAH,KAAMtG,KACD0G,MAAQ,CACXkE,aAAc,GACdC,SAAU,GACVC,WAAW,EACXC,KAAM,GACNC,SAAUC,IAAS,UAGrB7E,EAAK8E,OAASC,IAAMC,YACpBhF,EAAKiF,QAAUF,IAAMC,YAErBhF,EAAKkF,cAAgBlF,EAAKkF,cAActE,KAAnBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KACrBA,EAAKmF,eAAiBnF,EAAKmF,eAAevE,KAApBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KACtBA,EAAKoF,cAAgBpF,EAAKoF,cAAcxE,KAAnBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KACrBA,EAAKqF,WAAarF,EAAKqF,WAAWzE,KAAhBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KAClBA,EAAKsF,aAAetF,EAAKsF,aAAa1E,KAAlBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KAjBHA,mFAuBjBE,KAAKoF,0DAGYC,GAGbA,EAAUzD,YAAc5B,KAAKtG,MAAMkI,WAGrC5B,KAAKmF,WAAWnF,KAAKI,MAAMkE,aAActE,KAAKI,MAAMkF,cACpDtF,KAAK+E,QAAQQ,QAAQC,KAAKC,SAAS,CAAEC,OAAQ1F,KAAKgF,mBAElDK,EAAUxD,SAAW7B,KAAKtG,MAAMmI,QAChCwD,EAAUvD,UAAY9B,KAAKtG,MAAMoI,SACjCuD,EAAUhG,UAAYW,KAAKtG,MAAM2F,SACjCgG,EAAUtD,cAAgB/B,KAAKtG,MAAMqI,YAIrC/B,KAAK+E,QAAQQ,QAAQC,KAAKC,SAAS,CAAEC,OAAQ1F,KAAKgF,kBAElDK,EAAU9E,MACV8E,EAAU9E,KAAKgB,YAAcvB,KAAKtG,MAAM6G,KAAKgB,YAG7CvB,KAAKoF,cAAa,GAClBpF,KAAK+E,QAAQQ,QAAQC,KAAKC,SAAS,CAAEC,OAAQ1F,KAAKgF,0DAIpB,IAM5BW,EACApF,EAP4BK,EAAAZ,OAAA4F,UAAApE,OAAA,QAAAqE,IAAAD,UAAA,KAAAA,UAAA,IAUlCrF,EAAO,WACHoF,EAAM7E,IAAG,0BAAA5D,OAA2BqD,EAAK,KAAM,GAAtC,SAAArD,OAAgDqD,KAEzDA,EAAOP,KAAKtG,MAAM6G,KAAKgB,UAAY,IACnCoE,EAAM7E,IAAG,0BAAA5D,OAA2BqD,EAAK,KAAM,GAAtC,SAAArD,OAAgDqD,IAE3DM,MAAMC,IAAI,iBACPC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAwD,GACJ1D,MAAM8E,GACH5E,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAA+E,GACJvB,EAAWA,EAAS5I,IAAI,SAAAoK,GAAC,OAAA3H,OAAA4H,EAAA,EAAA5H,CAAA,GACpB2H,EACAD,EAAIrK,OAAO,SAAAwK,GACZ,OAAOA,EAAE5K,UAAY0K,EAAE9C,KACtB,MAELrC,EAAKQ,SAAS,CAAEkD,aAAcC,IAC9B1D,MAAMC,IAAG,uBAAA5D,OAAwBqD,EAAK,KAA7B,SAAArD,OAA0CqD,IAChDQ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJJ,EAAKlH,MAAM4B,OAAO,aAAa,GAC/BsF,EAAKQ,SAAS,CAACkE,aAActE,IAC7BJ,EAAKuE,WAAWZ,EAAUvD,4CAO7BsD,EAAcgB,GAAc,IAAAjE,EAAArB,KAGjCuE,EAAWD,EAAa7I,OAAO,SAAAsK,GAAC,OAAgC,OAA5BA,EAAE1E,EAAK3H,MAAMkI,aACrD2C,EAAQnG,OAAA8H,EAAA,EAAA9H,CAAOmG,GAAPrH,OAAAkB,OAAA8H,EAAA,EAAA9H,CAAoBkH,EAAa7J,OAAO,SAAAsK,GAAC,OAAgC,OAA5BA,EAAE1E,EAAK3H,MAAMkI,eAKlE,IAJA,IAAMuE,EAAYC,IAAWC,KAC3B9B,EAAS5I,IAAI,SAAAoK,GAAC,MAAI,CAACA,EAAEO,UAAWP,EAAEQ,aAClCJ,UACIK,EAAuB,GACpBC,EAAI,EAAGA,EAAIN,EAAU3E,OAAQiF,GAAK,EAAG,KAAA/L,EAC9B,CACZ6J,EAAS4B,EAAUM,IACnBlC,EAAS4B,EAAUM,EAAI,IACvBlC,EAAS4B,EAAUM,EAAI,KAHpB5L,EADuCH,EAAA,GACrCgM,EADqChM,EAAA,GACnCiM,EADmCjM,EAAA,GAQvCkM,KAAKzD,IAAIyD,KAAKC,IAAIhM,EAAEyL,UAAUI,EAAEJ,WACnCM,KAAKC,IAAIhM,EAAEyL,UAAUK,EAAEL,WACvBM,KAAKC,IAAIH,EAAEJ,UAAUK,EAAEL,YAAY,IACpCM,KAAKzD,IAAIyD,KAAKC,IAAIhM,EAAE0L,SAASG,EAAEH,UAC9BK,KAAKC,IAAIhM,EAAE0L,SAASI,EAAEJ,UACtBK,KAAKC,IAAIH,EAAEH,SAASI,EAAEJ,WAAW,IAEnCC,EAAqBM,KAAK,CACxBvC,EAAS4B,EAAUM,IACnBlC,EAAS4B,EAAUM,EAAI,IACvBlC,EAAS4B,EAAUM,EAAI,MAG3B,IAAMM,EAAS,CACbH,KAAK1D,IAAL8D,MAAAJ,KAAIxI,OAAA8H,EAAA,EAAA9H,CAAQmG,EAAS5I,IAAI,SAAAoK,GAAC,OAAIA,EAAE1E,EAAK3H,MAAMkI,eAC3CgF,KAAKzD,IAAL6D,MAAAJ,KAAIxI,OAAA8H,EAAA,EAAA9H,CAAQmG,EAAS5I,IAAI,SAAAoK,GAAC,OAAIA,EAAE1E,EAAK3H,MAAMkI,gBAE7C5B,KAAKoB,SAAS,CAAEmD,WAAUiC,uBAAsBO,mDAGlC,IAAArF,EAAA1B,KAKd,MAAO,CACL,IAAIiH,IAAa,CACfhE,GAAI,gBACJwB,KAAMzE,KAAKI,MAAMoG,qBACjBU,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,eAAgBtH,KAAKtG,MAAMoI,QAC3ByF,mBAAoB,EACpBC,WAAY,SAAAC,GAAC,OACXA,EAAE9L,IAAI,SAAAoK,GAAC,OACLrE,EAAKhI,MAAMmI,OACP,CAACkE,EAAEO,UAAWP,EAAEQ,SAAUR,EAAE2B,UAC5B,CAAC3B,EAAEO,UAAWP,EAAEQ,aAExBoB,aAAc3H,KAAKkF,cACnB0C,aAAc,CAAC,GAAI,GAAI,GAAI,GAC3BC,aAAc,EACdvI,OAAQ,IACRwI,eAAgB,CACdH,aAAc3H,KAAKtG,MAAMkI,UACzB4F,WAAY,CAACxH,KAAKtG,MAAMmI,OAAQ7B,KAAKtG,MAAM2F,SAC3CiI,eAAgBtH,KAAKtG,MAAMoI,WAG/B,IAAIiG,IAAiB,CACnB9E,GAAI,gBACJwB,KAAMzE,KAAKI,MAAMmE,SAAS9I,OAAO,SAAAsK,GAAC,OAAIA,EAAE1K,UACxC6L,UAAU,EACVc,YAAahI,KAAKtG,MAAMqI,YAAc,EAAI,EAC1CkG,YAAa,SAAAR,GAAC,MAAI,CAACA,EAAEnB,UAAWmB,EAAElB,WAClC2B,UAAW,IACXP,aAAc,CAAC,GAAI,GAAI,GAAI,KAC3BQ,iBAAkB,iBAAM,CAAC,GAAI,MAC7BC,QAAS,SAAAC,GAAI,OACX3G,EAAKN,SAAS,CACZkH,cAAeD,EAAKE,OACpBC,SAAUH,EAAKtC,EACf0C,SAAUJ,EAAKK,KAEnB/N,QAAS,SAAA0N,GAAI,OAAI3G,EAAKhI,MAAM4B,OAAO,iBAAiB+M,EAAKE,SACzDI,UAAW,iBAAM,WACjBb,eAAgB,CACdc,eAAgB5I,KAAKtG,MAAMqI,sDAMrB0F,GAKZ,IAEIoB,EAFEC,EAAQ9I,KAAKtG,MAAMkI,UALVmH,EAAA3K,OAAAC,EAAA,EAAAD,CAMI4B,KAAKI,MAAM2G,OANf,GAMR7D,EANQ6F,EAAA,GAMH5F,EANG4F,EAAA,GASbF,EADE3F,IAAMC,EACDsE,EAAE9L,IAAI,SAAAoK,GAAC,OAAE,IAET0B,EAAE9L,IAAI,SAAAoK,GAAC,OAAIa,KAAKoC,MAAO,KAAOjD,EAAE+C,GAAS5F,IAASC,EAAMD,MAEjE,IAAM+F,EAAMjJ,KAAKtG,MAAM2F,QACjB6J,EAAKvE,IAAoB,gBAAVmE,EAA0B,WAAa,UAC5D,OAAO1K,OAAA8H,EAAA,EAAA9H,CAAI8K,EAAGL,EAAK,KAAnB3L,OAAA,CAAwB+L,GAAxB7K,OAAA8H,EAAA,EAAA9H,CAAgC8K,EAAGL,EAAK,KAAxC,CAA6CI,GAA7C7K,OAAA8H,EAAA,EAAA9H,CAAqD8K,EAAGL,EAAK,KAA7D,CAAkEI,6CAGnD,IAAA7N,EAG+B4E,KAAKI,OAAS,GAApDkI,EAHOlN,EAGPkN,cAAeE,EAHRpN,EAGQoN,SAAUC,EAHlBrN,EAGkBqN,SAEjC,OACEH,GACE9J,EAAA3D,EAAAC,cAAA,OACEC,MAAO,CACL0D,SAAU,WACVa,OAAQ,EACR6J,cAAe,OACf5J,KAAMiJ,EACNxM,IAAKyM,EACLW,gBAAiB,kBACjB/O,MAAO,QACPoF,QAAS,QAGXjB,EAAA3D,EAAAC,cAAA,WAAMwN,EAAc9M,MACpBgD,EAAA3D,EAAAC,cAAA,WACGwN,EAActI,KAAKtG,MAAMkI,WAD5B,IACyC/F,IAAMmE,KAAKtG,MAAMkI,8CAOzD,IAAAyH,EAAArJ,KACP,OACExB,EAAA3D,EAAAC,cAACwO,EAAA,EAAD,CACEC,IAAKvJ,KAAK+E,QACVW,OAAQ1F,KAAKgF,gBACbwE,iBAAkB,CAChBjD,SAAU,GACVD,UAAW,IACXmD,KAAM,EACNC,QAAS,EACTC,QAAS,GACTC,MAAO,EACPC,QAAS,GAEX9K,MAAM,OACNC,OAAO,OACP8K,YAAY,EACZnB,UAAW,iBAAM,YAEjBnK,EAAA3D,EAAAC,cAACiP,EAAA,EAAD,CACEC,WAAW,EACXhI,SAAQ,0BAAA9E,OAA4B8C,KAAKtG,MAAMsI,SAAvC,OACRiI,qBAAqB,EACrBC,qBAlQR,uGAmQQX,IAAK,SAAA5N,GAAG,OAAK0N,EAAKzE,OAASjJ,KAE5BqE,KAAKiF,uBAnQIrB,+DCCXuG,GAAkB,kBAAVC,GAA6B,iBAEtCC,GAAS,CACbC,MAAO,CACLC,KAAM,CAAEC,OAAQ,QAASC,YAAa,GACtCC,MAAO,CAAED,YAAa,GACtBE,WAAY,CAAEC,KAAM,QAASC,WAAY,UAAWlL,SAAU,IAEhEmL,OAAQ,CACNC,KAAM,CACJP,OAAQ,qBACRC,YAAa,GAEfF,KAAM,CAAEC,OAAQL,GAAQM,YAAa,GACrCC,MAAO,CAAED,YAAa,GACtBE,WAAY,CAAEC,KAAM,gBAAiBC,WAAY,UAAWlL,SAAU,KAExEqL,OAAQ,CACNT,KAAM,CAAEC,OAAQJ,GAAOK,YAAa,GACpCC,MAAO,CAAED,YAAa,GACtBE,WAAY,CACVC,KAAM,gBACNC,WAAY,UACZlL,SAAU,KAGdsL,MAAO,CACLxG,KAAM,CAAE+F,OAAQL,IAChBe,OAAQ,CAAEC,OAAQ,iBAAkB/L,WAAY,YAElDgM,MAAO,CACL3G,KAAM,CAAE+F,OAAQJ,IAChBc,OAAQ,CAAEC,OAAQ,iBAAkB/L,WAAY,aAgE9CiM,GAAO,kBAAM,MAEbC,GAAiBC,aAAgB,OAAQ,UA6HhCC,GA3HG,SAAAC,GAAqD,IAAlDhH,EAAkDgH,EAAlDhH,KAAMiH,EAA4CD,EAA5CC,WAAYC,EAAgCF,EAAhCE,WAAYC,EAAoBH,EAApBG,OAAQC,EAAYJ,EAAZI,MACnDC,EAhEU,SAACrH,EAAMiH,EAAYC,EAAYE,GAC/C,OAAO,SAAAnR,GAA4B,IAAzBqL,EAAyBrL,EAAzBqL,EAAG2C,EAAsBhO,EAAtBgO,EAAW1K,GAAWtD,EAAnBqR,OAAmBrR,EAAXsD,MAChBgO,EAAMvH,EAAKjD,OACXyK,EAAMrF,KAAKsF,OAAQnG,EAAI,IAAM,KAAQiG,EAAM,IAC3CG,EAAQ1H,EAAK2H,KAAK,SAAAC,GAAG,OAAKA,EAAI9L,MAAQvC,IAC5C,GAAa,MAATmO,EAAiB,OAAO3N,EAAA3D,EAAAC,cAAA,UAC5B,IAAMwR,EAAaL,EAAMD,EAAM,EAAI,MAAQ,QACrCO,EAAON,EAAMD,EAAM,GAAK,EAAI,EAC5BQ,EAAOX,EAAQ,GAAK,EAPOzQ,EAQhB,CAACS,IAAM6P,GAAa7P,IAAM8P,IAApCc,EAR0BrR,EAAA,GAQtBsR,EARsBtR,EAAA,GASjC,OACEoD,EAAA3D,EAAAC,cAAA,SACE0D,EAAA3D,EAAAC,cAAA,QACEiL,EAAGA,EAAIwG,EACP7D,EAAGA,EAAI,GAAK8D,EACZzR,MAAO,CACL6P,KAAM,gBACN0B,aACA5M,WAAY,MACZC,SAAU,KAPd,GAAAzC,OASKiP,EAAM5L,KAAKoM,mBAAmB,GAAI,CACrCjQ,IAAK,UACLE,MAAO,UACPgQ,KAAM,cAERpO,EAAA3D,EAAAC,cAAA,QACEiL,EAAGA,EAAIwG,EACP7D,EAAGA,EAAI,GAAK8D,EACZzR,MAAO,CACL6P,KAAM,gBACN0B,aACA5M,WAAY,MACZC,SAAU,KAPd,GAAAzC,OASKiP,EAAM5L,KAAKsM,mBAAmB,GAAI,CACrC/P,KAAM,UACNgQ,OAAQ,cAEVtO,EAAA3D,EAAAC,cAAA,QACEiL,EAAGA,EAAIwG,EACP7D,EAAGA,EAAI8D,EACPzR,MAAO,CAAEuR,aAAY1B,KAAMT,GAAQxK,SAAU,KAH/C,GAAAzC,OAIKiP,EAAMT,GAAYqB,QAAQ,IAJ/B7P,OAIoCuP,IACnCZ,GACDrN,EAAA3D,EAAAC,cAAA,QACEiL,EAAGA,EAAIwG,EACP7D,EAAGA,EACH3N,MAAO,CAAEuR,aAAY1B,KAAMR,GAAOzK,SAAU,KAH9C,GAAAzC,OAIKiP,EAAMR,GAAYoB,QAAQ,IAJ/B7P,OAIoCwP,IACpClO,EAAA3D,EAAAC,cAAA,QACE2M,EAAC,IAAAvK,OAAM6I,EAAN,UAAA7I,OAAgB6I,EAAhB,OACDhL,MAAO,CAAE0P,YAAa,EAAGD,OAAQ,qBAY1B7B,CAAUlE,EAAMiH,EAAYC,EAAYE,GAEvD,OACErN,EAAA3D,EAAAC,cAACkS,GAAA,EAAD,CACEC,MAAO,CAAClH,EAAE,QACVmH,QAAS,CACPC,SAAU,IACVC,OAAQ,CAAED,SAAU,MAEtBpS,MAAO,CACLmQ,OAAQ,CACN9L,WAAY,UACZiO,UAAW,iBAGfC,mBACE9O,EAAA3D,EAAAC,cAACwQ,GAAD,CACEiC,YAAa,SAAA9F,GAAC,OAAIA,EAAE1B,GACpByH,qBAAsBhP,EAAA3D,EAAAC,cAACgR,EAAD,MACtB2B,kBAAmB,EACnBC,gBAAiBlP,EAAA3D,EAAAC,cAACuQ,GAAD,QAGrBtM,MAAO,IACPC,OAAQ,KAERR,EAAA3D,EAAAC,cAAC6S,GAAA,EAAD,CACE5H,EAAG,GACH2C,EAAG,GACH1K,KAAI,GAAAd,OAAK0Q,IAAclC,GAAnB,QAAAxO,OAAqCrB,IAAM6P,IAC/C3Q,MAAO,CAAE4E,SAAU,GAAIiL,KAAMT,MAE9B0B,GACDrN,EAAA3D,EAAAC,cAAC6S,GAAA,EAAD,CACE5H,EAAG,IACH2C,EAAG,GACH1K,KAAI,GAAAd,OAAK0Q,IAAcjC,GAAnB,QAAAzO,OAAqCrB,IAAM8P,IAC/C5Q,MAAO,CAAE4E,SAAU,GAAIiL,KAAMR,MAG/B5L,EAAA3D,EAAAC,cAAC+S,GAAA,EAAD,CACEZ,MAAM,OACNlS,MAAOsP,GAAOC,MACdwD,UAAW,GACXC,QAAS,KAGXvP,EAAA3D,EAAAC,cAAC+S,GAAA,EAAD,CACEG,eAAa,EACbjT,MAAOsP,GAAOS,OACdmD,YAAY,OACZC,WAAY,CAAC,KAAO,IAAM,KAAO,GAAK,KAAO,IAAM,KAAO,GAC1DC,WAAY,SAAA1R,GAAC,OACX2R,YAEIxC,EAAOF,GAAY,GACnBjP,GAAKmP,EAAOF,GAAY,GAAKE,EAAOF,GAAY,KAChDqB,QAAQ,OAKhBvO,EAAA3D,EAAAC,cAACuT,GAAA,EAAD,CACEtT,MAAOsP,GAAOY,MACdqD,OAAQ,CAAE5F,EAAG,EAAE,GAAK,MACpBjE,KAAMA,EACNsB,EAAE,OACF2C,EAAG,SAAAjB,GAAC,OACDA,EAAEiE,GAAcE,EAAOF,GAAY,KACnCE,EAAOF,GAAY,GAAKE,EAAOF,GAAY,KAE9C6C,cAAc,WAGf1C,GACCrN,EAAA3D,EAAAC,cAAC+S,GAAA,EAAD,CACEG,eAAa,EACbjT,MAAOsP,GAAOW,OACdiD,YAAY,QACZC,WAAY,CAAC,KAAO,IAAM,KAAO,GAAK,KAAO,IAAM,KAAO,GAE1DC,WAAY,SAAA1R,GAAC,OACX2R,YAEIxC,EAAOD,GAAY,GACnBlP,GAAKmP,EAAOD,GAAY,GAAKC,EAAOD,GAAY,KAChDoB,QAAQ,OAMjBlB,GACCrN,EAAA3D,EAAAC,cAACuT,GAAA,EAAD,CACEtT,MAAOsP,GAAOe,MACdkD,OAAQ,CAAE5F,EAAG,EAAE,GAAK,MACpBjE,KAAMA,EACNsB,EAAE,OACF2C,EAAG,SAAAjB,GAAC,OACDA,EAAEkE,GAAcC,EAAOD,GAAY,KACnCC,EAAOD,GAAY,GAAKC,EAAOD,GAAY,KAE9C4C,cAAc,oQC7MxB,IAAMC,GAAejV,IAAOC,IAAViV,KAIN,SAAA/U,GAAK,OACbA,EAAMsF,OAAS,eAAiBtF,EAAMsF,OAAS,MAAQ,SAG3C,SAAAtF,GAAK,OAAIA,EAAMsF,QAAU,GACtB,SAAAtF,GAAK,OAAIA,EAAMsF,QAAU,IAG5CwP,GAAalU,UAAY,CAEvB0E,OAAQzE,IAAUkD,QAGpB,IAAM4M,GAAS,CACbqE,YAAa,CACX1T,QAAS,OACT2T,cAAe,SACfvK,eAAgB,SAChBwK,OAAQ,YAEVC,YAAa,CACXlP,SAAU,GACVD,WAAY,IACZrF,MAAO,gBACPuU,OAAQ,YAEVE,aAAc,CACZzU,MAAO,kBACPqF,WAAY,IACZkP,OAAQ,YAEVG,WAAY,CACV1U,MAAO,oBACPqF,WAAY,IACZkP,OAAQ,YAEVI,YAAa,CACX3U,MAAO,qBACPqF,WAAY,IACZkP,OAAQ,YAEVzU,OAAQ,CACN8U,UAAW,SAoKAC,eA/Jb,SAAAA,EAAYxV,GAAO,IAAAoG,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAkP,IACjBpP,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAA8Q,GAAA/O,KAAAH,KAAMtG,KACD0G,MAAQ,CACXqE,KAAM,GACNmH,OAAQ,GACRF,WAAY,GACZC,WAAY,GACZwD,SAAU,GACVtD,OAAO,EACPiD,aAAc,OAEhBhP,EAAKsP,UAAYtP,EAAKsP,UAAU1O,KAAftC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KAXAA,mFAebE,KAAKtG,MAAM2V,eAAehU,SAC5B2E,KAAKoP,YAEPtT,OAAOC,SAAS,CAAEC,IAAKC,SAASC,KAAKC,aAAcC,SAAU,sDAG5CiJ,EAAWiK,GAEzBjK,EAAUgK,gBACXhK,EAAUgK,eAAehU,UAAY2E,KAAKtG,MAAM2V,eAAehU,UAE/D2E,KAAKoP,YACLpP,KAAKoB,SAAS,CAAEyK,OAAO,KAEtByD,EAAUR,eAAiB9O,KAAKI,MAAM0O,cACvC9O,KAAKoP,gDAIG,IAAAxO,EAAAZ,KAGc3E,EAAY2E,KAAKtG,MAAjC2V,eACAP,EAAiB9O,KAAKI,MAAtB0O,aACFvO,EAAOqG,KAAKsF,OAAO,IAAI/K,MAAQI,UAAY,KAC3CgO,EAAalU,EAAQA,QAErBmU,EAAcV,EAAa,MAAQ,iBAAmB,WACtDnJ,EAAM7E,IAAG,OAAA5D,OAAQsS,EAAR,cAAAtS,OAAgCqS,EAAhC,WAAArS,OAAoDqD,EACjEuO,EADa,SAAA5R,OACOqD,GACtBM,MAAM8E,GACH5E,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJA,EAAIyO,QAAQ,SAAA1J,GACVA,EAAExF,KAAO,IAAIY,KAAK4E,EAAExF,KAAO,OAG7B,IAAMqL,EAAS,GAuBf,OAtBAtJ,IAAOmN,QAAQ,SAAA/T,GACbkQ,EAAOlQ,EAAEoH,OAAS,CAChB8D,KAAK1D,IAAL8D,MAAAJ,KAAIxI,OAAA8H,EAAA,EAAA9H,CACC4C,EAAIvF,OAAO,SAAAgM,GAAC,OAAmB,OAAfA,EAAE/L,EAAEoH,SAAiBnH,IAAI,SAAA8L,GAAC,OAAIA,EAAE/L,EAAEoH,WAEvD8D,KAAKzD,IAAL6D,MAAAJ,KAAIxI,OAAA8H,EAAA,EAAA9H,CACC4C,EAAIvF,OAAO,SAAAgM,GAAC,OAAmB,OAAfA,EAAE/L,EAAEoH,SAAiBnH,IAAI,SAAA8L,GAAC,OAAIA,EAAE/L,EAAEoH,YANvC,IAAA4M,EAAAtR,OAAAC,EAAA,EAAAD,CASHwN,EAAOlQ,EAAEoH,OATN,GASXjI,EATW6U,EAAA,GASRhJ,EATQgJ,EAAA,GAWbC,SAAS9U,IAAO8U,SAASjJ,KAC5BkF,EAAOlQ,EAAEoH,OAAS,EAAE,GAAK,KAGvBjI,IAAM6L,IACRkF,EAAOlQ,EAAEoH,OAAS,CAChBjI,EAAI,GAAM+L,KAAKC,IAAIhM,EAAI,GACvB6L,EAAI,GAAME,KAAKC,IAAIH,EAAI,OAItB,CAAC1F,EAAK4K,KAEd7K,KAAK,SAAArG,GAAoB,IAAAU,EAAAgD,OAAAC,EAAA,EAAAD,CAAA1D,EAAA,GAAlB+J,EAAkBrJ,EAAA,GAAZwQ,EAAYxQ,EAAA,GAElB+T,EAAW7M,IAAO7G,OAAO,SAAAC,GAAC,OAAyB,OAArB+I,EAAK,GAAG/I,EAAEoH,SAFtB2I,EAIS,CAAC0D,EAAS,GAAGrM,MAAOqM,EAAS,GAAGrM,OAA1D4I,EAJiBD,EAAA,GAILE,EAJKF,EAAA,GAKxB7K,EAAKQ,SAAS,CAAEqD,OAAMmH,SAAQF,aAAYC,aAAYwD,gDAInD,IAAA9N,EAAArB,KAAA4P,EACyD5P,KAAKI,MAA/DqE,EADCmL,EACDnL,KAAMmH,EADLgE,EACKhE,OAAQF,EADbkE,EACalE,WAAYC,EADzBiE,EACyBjE,WAAYwD,EADrCS,EACqCT,SAAUtD,EAD/C+D,EAC+C/D,MAMtD,OALApH,EAAOA,EAAKhJ,OAAO,SAAAsK,GAAC,OAAsB,OAAlBA,EAAE2F,IAA0C,OAAlB3F,EAAE4F,KAC/CC,EAAOF,IAAgBE,EAAOD,KACjCC,EAAOF,GAAc,EAAE,GAAI,IAC3BE,EAAOD,GAAc,CAAC,EAAG,MAGzBnN,EAAA3D,EAAAC,cAAC0T,GAAD,CAAcxP,OAAQgB,KAAKtG,MAAM8D,WAC/BgB,EAAA3D,EAAAC,cAAA,OAAKC,MAAO,CAAE0E,QAAS,WAAYoQ,SAAU,IAC1CpL,EAAK,IACJjG,EAAA3D,EAAAC,cAACgV,GAAD,CACErL,KAAMA,EACNiH,WAAYA,EACZC,WAAYA,EACZC,OAAQA,EACRC,MAAOA,KAIbrN,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAOqE,aACjBlQ,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAOwE,aAAc7O,KAAKtG,MAAM2V,eAAe7T,MAE3DgD,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAOyE,cAAnB,iBACAtQ,EAAA3D,EAAAC,cAAC4H,EAAA7H,EAAD,CACE8H,QAASoN,IACTjN,MAAO9C,KAAKI,MAAM0O,aAAakB,WAC/BpN,SAAU,SAAAC,GAAC,OAAIxB,EAAKD,SAAS,CAAC0N,aAAarL,SAASZ,EAAEC,YAGxDtE,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAO0E,YAAnB,mBACAvQ,EAAA3D,EAAAC,cAAC4H,EAAA7H,EAAD,CACE8H,QAASwM,EACTvM,SAAU,SAAAC,GAAC,OAAIxB,EAAKD,SAAS,CAAEsK,WAAY7I,EAAEC,SAC7CA,MAAO4I,EACP3I,YAAa2I,IAGflN,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAO2E,aAAnB,oBACAxQ,EAAA3D,EAAAC,cAAC4H,EAAA7H,EAAD,CACE8H,QAAOvE,OAAA8H,EAAA,EAAA9H,CAAM+Q,GAANjS,OAAA,CAAgB,CAAE4F,MAAO,OAAQmN,MAAO,UAC/CrN,SAAU,SAAAC,GACQ,SAAZA,EAAEC,MACJzB,EAAKD,SAAS,CAAEyK,OAAO,IAEvBxK,EAAKD,SAAS,CAAEuK,WAAY9I,EAAEC,MAAO+I,OAAO,KAGhD/I,MAAQ+I,EAAQF,EAAY,OAC5B5I,YAAa4I,IAEfnN,EAAA3D,EAAAC,cAACK,EAAA,EAAD,CACEd,MAAM,mBACNU,MAAOsP,GAAOlQ,OACdQ,QAAS,SAAAkI,GAAC,OAAIxB,EAAK3H,MAAM4B,OAAO,cAAc,KAHhD,kBA1IWsI,kCCvDfyG,GAAS,CACb6F,MAAO,CACLC,KAAK,IACLzQ,WAAW,IACXC,SAAU,OACV1E,UAAU,SACVZ,MAAM,qBAER+V,MAAO,CACLD,KAAM,IACNxQ,SAAU,OACViP,OAAQ,iBACR3T,UAAW,UAEbd,OAAQ,CACNgW,KAAM,IACNxQ,SAAU,OACViP,OAAQ,iBA4CGyB,GAxCM,SAAA3V,GAAA,IAAG4V,EAAH5V,EAAG4V,UAAWhV,EAAdZ,EAAcY,OAAd,OACnBkD,EAAA3D,EAAAC,cAACyV,GAAA1V,EAAD,CACEE,MAAO,CACLyV,QAAS,CAAElR,OAAQ,KACnBmR,QAAS,CACP1R,MAAO,OACPC,OAAQ,OACR4P,OAAQ,YACRxP,WAAY,sBACZ/E,MAAO,gBACPW,QAAS,OACT2T,cAAe,SACfvK,eAAgB,kBAGpBsM,OAAQJ,EACRK,aAAa,wBACbC,aAAa,GAEbpS,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAO6F,OAAnB,+BACA1R,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAO+F,OAAnB,wHAGA5R,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAO+F,OAAnB,qGAGA5R,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAO+F,OAAnB,sHAGA5R,EAAA3D,EAAAC,cAAA,OAAKC,MAAKqD,OAAA4H,EAAA,EAAA5H,CAAA,GAAMiM,GAAO+F,MAAb,CAAmB/V,MAAM,kBAAmBsF,SAAS,UAA/D,+GAGAnB,EAAA3D,EAAAC,cAAA,OAAKC,MAAOsP,GAAOlQ,QACjBqE,EAAA3D,EAAAC,cAACK,EAAA,EAAD,CAAQR,QAAS,kBAAMW,EAAO,aAAa,KAA3C,wDC9CN,IAAMuV,GAAW,WACf,OAA8C,OAA1CC,aAAaC,QAAQ,mBAGvBD,aAAaE,QAAQ,gBAAgB,IAC9B,IAIUC,eACnB,SAAAA,EAAYvX,GAAO,IAAAoG,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAiR,IACjBnR,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAA6S,GAAA9Q,KAAAH,KAAMtG,KACD0G,MAAQ,CACXkQ,UAAWO,KACXtQ,KAAM,KACN/C,UAAW,EACXoE,UAAW,cACXC,QAAQ,EACRC,QAAS,EACTzC,QAAS,IACT0C,aAAa,EACbC,SAAU,OACVqN,eAAgB,GAChB9T,YAAY,EACZsC,WAAW,GAEbiC,EAAK2B,QAAU3B,EAAK2B,QAAQf,KAAbtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KACfA,EAAKoE,WAAapE,EAAKoE,WAAWxD,KAAhBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KAClBA,EAAKoR,OAASrM,IAAMC,YACpBhF,EAAKxE,OAASwE,EAAKxE,OAAOoF,KAAZtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAA0B,KAnBGA,mFAyBjBE,KAAKoB,SAAS,CAAE5D,UAAWwC,KAAKkR,OAAOC,eACvCnR,KAAKkE,6CAGCzH,GAKJA,IALiBmJ,UAAApE,OAAA,QAAAqE,IAAAD,UAAA,KAAAA,UAAA,GAKb,IAAIzE,KAAK1E,EAAI,KAEb,IAAI0E,KAAK1E,GAEfuD,KAAKoB,SAAS,CAAEb,KAAM9D,yCAGX,IAAAmE,EAAAZ,KAGXa,MAAMC,IAAI,iBACPC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAgF,GAAC,OAAInF,EAAKa,QAAQsE,EAAExF,uCAGvB3E,EAAKkH,GAGV9C,KAAKoB,SAALhD,OAAAgT,EAAA,EAAAhT,CAAA,GAAiBxC,EAAMkH,qCAGhB,IAAAzB,EAAArB,KAAA4P,EAcH5P,KAAKI,MAZPG,EAFKqP,EAELrP,KACA/C,EAHKoS,EAGLpS,UACAoE,EAJKgO,EAILhO,UACAC,EALK+N,EAKL/N,OACAC,EANK8N,EAML9N,QACAzC,EAPKuQ,EAOLvQ,QACA0C,EARK6N,EAQL7N,YACAC,EATK4N,EASL5N,SACAqN,EAVKO,EAULP,eACA9T,EAXKqU,EAWLrU,WACAsC,EAZK+R,EAYL/R,UACAyS,EAbKV,EAaLU,UAEF,OACE9R,EAAA3D,EAAAC,cAAA0D,EAAA3D,EAAAwW,SAAA,KACE7S,EAAA3D,EAAAC,cAACwW,EAAA,EAAD,MAEA9S,EAAA3D,EAAAC,cAACyW,EAAA,EAAD,CACEC,OAAQ,SAAAjI,GAAG,OAAKlI,EAAK6P,OAAS3H,GAC9BkI,eAAa,EACbC,SAAO,EACPC,MAAI,EACJrW,OAAQ0E,KAAK1E,SAGfkD,EAAA3D,EAAAC,cAAA,OACEC,MAAO,CACLC,QAAS,OACT2T,cAAe,MACf5P,MAAO,OACPC,OAAQ,QACR9D,WAAY,UACZ0T,OAAQ,aAIVpQ,EAAA3D,EAAAC,cAAA,OAAKC,MAAO,CAAEgE,MAAO,OAAQC,OAAQ,WAErCR,EAAA3D,EAAAC,cAAA,OACEC,MAAO,CACLoV,KAAM,WACN1R,SAAU,WACVmT,UAAW,QACXvE,UAAW,kBAGb7O,EAAA3D,EAAAC,cAAC+W,EAAD,CACErU,UAAWA,EACXoE,UAAWA,EACXC,OAAQA,EACRC,QAASA,EACTzC,QAASA,EACT0C,YAAaA,EACbC,SAAUA,EACVzB,KAAMA,EACNkB,QAASzB,KAAKyB,QACdnG,OAAQ0E,KAAK1E,OACbuC,UAAWA,IAGbW,EAAA3D,EAAAC,cAACgX,GAAD,CACElQ,UAAWA,EACXC,OAAQA,EACRC,QAASA,EACTL,QAASzB,KAAKyB,QACdlB,KAAMA,EACNjF,OAAQ0E,KAAK1E,OACb+D,QAASA,EACT0C,YAAaA,EACbC,SAAUA,IAGZxD,EAAA3D,EAAAC,cAACiX,EAAD,CACE/S,OAAQxB,EAAY,EACpB+C,KAAMA,EACN2D,WAAYlE,KAAKkE,aAEnB1F,EAAA3D,EAAAC,cAACK,EAAA,EAAD,CACEE,QAASgU,EACT/T,OAAQ0E,KAAK1E,OACbC,WAAYA,KAGhBiD,EAAA3D,EAAAC,cAACkX,GAAD,CAAc1B,UAAWA,EAAWhV,OAAQ0E,KAAK1E,SAEjDkD,EAAA3D,EAAAC,cAAA,OAAKC,MAAO,CAAEgE,MAAO,OAAQC,OAAQ,YAEtCzD,GAAc8T,GACb7Q,EAAA3D,EAAAC,cAACmX,GAAD,CACE5C,eAAgBA,EAChB7R,UAAWA,EACXlC,OAAQ0E,KAAK1E,iBArJasI,8CCtBtCrH,EAAAkL,EAAAyK,EAAA,sBAAAvN,IAAApI,EAAAkL,EAAAyK,EAAA,sBAAArW,IAAAU,EAAAkL,EAAAyK,EAAA,sBAAA5P,IAAA/F,EAAAkL,EAAAyK,EAAA,sBAAAC,IAAA5V,EAAAkL,EAAAyK,EAAA,sBAAAtE,IAAArR,EAAAkL,EAAAyK,EAAA,sBAAAnC,IAAAxT,EAAAkL,EAAAyK,EAAA,sBAAApR,IAAA,IAAM6D,EAAY,CAChByN,IAAKC,EAAQ,KACbC,SAAUD,EAAQ,KAClBE,OAAQF,EAAQ,MAGZxW,EAAQ,CACZ2W,YAAe,QACfC,kBAAqB,MACrBC,aAAgB,MAChBC,SAAY,IACZC,gBAAmB,OACnBC,eAAkB,OAClBC,KAAQ,KACRpL,SAAY,KAGRpF,EAAS,CACb,CAACQ,MAAM,cAAemN,MAAO,eAC7B,CAACnN,MAAM,oBAAqBmN,MAAO,YACnC,CAACnN,MAAM,eAAgBmN,MAAO,qBAC9B,CAACnN,MAAM,WAAYmN,MAAO,YAC1B,CAACnN,MAAM,kBAAmBmN,MAAO,mBACjC,CAACnN,MAAM,iBAAkBmN,MAAO,sBAChC,CAACnN,MAAM,OAAQmN,MAAO,kBAGlBkC,EAAmB7P,EAAPpF,OAAA,CAAe,CAAC4F,MAAM,WAAYmN,MAAO,cAErDrC,EAAgB,CACpB4E,YAAa,cACbC,kBAAmB,WACnBC,aAAc,oBACdC,SAAU,WACVC,gBAAiB,kBACjBC,eAAgB,qBAChBC,KAAM,gBACNpL,SAAU,YAGNqI,EAAc,CAClB,CAACjN,MAAO,OAAQmN,MAAO,aACvB,CAACnN,MAAO,QAASmN,MAAO,YACxB,CAACnN,MAAO,SAAUmN,MAAO,aACzB,CAACnN,MAAO,UAAWmN,MAAO,eAMfnP,EAAM","file":"static/js/1.b11ac33b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\";\n\nimport { UNITS } from '../utils/constants';\n\nconst ContainerAll = styled.div`\n  position: absolute;\n  bottom: 15px;\n  right: 5px;\n  z-index: 10000;\n  background-color: hsla(0, 0%, 99%, 90%);\n  color: hsl(0, 0%, 20%);\n  box-shadow: 0px 1px 5px hsl(0, 0%, 50%);\n  border-radius: 5px;\n  opacity: ${props => (props.show ? 1 : 0)};\n  transform: ${props => (props.show ? \"scale(1)\" : \"scale(0)\")};\n  transition: 0.2s;\n  padding: 5px 10px;\n  font-size: 16px;\n  pointer-events: none;\n`;\n\nconst CloseDiv = styled.div`\n  position: absolute;\n  font-size: 20px;\n  top: 2px;\n  right: 5px;\n  pointer-events: auto;\n  transition: 0.2s;\n  :after {\n    display: inline-block;\n    content: \"\\00d7\"; /* This will render the 'X' */\n  }\n  :hover {\n    color: red;\n  }\n`;\n\nconst ContainerMeasures = styled.div`\n  margin: 10px 0px;\n`;\n\nconst Header = styled.div`\n  font-size: 18px;\n  font-weight: 600;\n  color: hsl(0, 0%, 10%);\n  margin-right: 8px;\n`;\n\nconst Button = styled.button`\n  margin: -5px auto 5px;\n  font-size: 16px;\n  padding: 5px 10px;\n  background-color: white;\n  font-weight: 500;\n  pointer-events: auto;\n  border: 2px solid ${props => props.color || 'hsl(200, 100%, 50%)'};\n  border-radius: 5px;\n  box-shadow: 0px 5px 5px hsla(0, 0%, 0%, 0.1);\n  :hover {\n    background-color: ${props => props.color || 'hsl(200, 100%, 50%)'};\n    color: white;\n  }\n  transition: 0.2s;\n`;\nButton.propTypes = {\n  color: PropTypes.string\n}\n\nconst GraphButton = ({ onClick }) => (\n  <div style={{ display: \"flex\", textAlign: \"center\", alignItems: \"center\" }}>\n    <Button onClick={onClick}>Graphs</Button>\n  </div>\n);\n\nconst ShowMeasures = ({ station, change, showGraphs }) => {\n  let show = station.name;\n\n  const parameters = [\n    [\"altitude\", \"Altitude\"],\n    [\"temperature\", \"Temperature\"],\n    [\"pressure_altitude\", \"Pressure at station\"],\n    [\"pressure_qnh\", \"Adjusted pressure\"],\n    [\"wind_mean_speed\", \"Mean wind speed\"],\n    [\"wind_max_speed\", \"Max wind speed\"],\n    [\"humidity\", \"Humidity\"],\n    [\"rain\", \"Precipitation\"]\n  ];\n\n  return (\n    <ContainerAll show={show}>\n      <CloseDiv onClick={() => {change(\"clickedStation\", {});change(\"showGraphs\", false);}} />\n      <Header>{station.name}</Header>\n      {parameters\n        .filter(p => station[p[0]] !== null)\n        .map(p => (\n          <ContainerMeasures key={p[0]}>\n            <div>{p[1]}</div>\n            <div>\n              {station[p[0]]} {UNITS[p[0]]}\n            </div>\n          </ContainerMeasures>\n        ))}\n\n      {show && <GraphButton onClick={() => {\n        if (showGraphs) {\n          window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\n        } else {\n          change(\"showGraphs\", true);}\n      }} /> }\n    </ContainerAll>\n  );\n};\n\nexport { Button };\nexport default ShowMeasures;\n","module.exports = __webpack_public_path__ + \"static/media/information.2508df20.svg\";","function parseDate(t) {\n  let day = t.getDate();\n  let month = t.getMonth()+1;\n  let hour = t.getHours();\n  let minutes = t.getMinutes();\n  minutes = minutes - (minutes%10);\n  if (day < 10) {\n    day = '0' + day;\n  }\n  if (month < 10) {\n    month = '0' + month;\n  }\n  if (hour < 10) {\n    hour = '0' + hour;\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n  const date = `${t.getFullYear()}-${month}-${day}`;\n  const time = `${hour}:${minutes}`;\n  return [date,time];\n}\n\nexport default parseDate;","import React, { Component, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nimport \"styled-components/macro\";\n\nimport { Button } from \"./HomePageComponents.jsx\";\nimport parseDate from \"../utils/date\";\nimport { PARAMS_W_ALT as PARAMS, URL } from \"../utils/constants\";\n\nimport infologo from \"../img/information.svg\";\n\nconst texts = {\n  parameter: 'Change the parameter used in the heatmap.',\n  time: 'Choose the measurement time (some dates might be unavailable).',\n  threeD: 'Display the heatmap in 3D using the altitude of the stations (use [Ctrl/Cmd]+mouse to change perspective on map).',\n  opacity: 'Change the opacity of the heatmap.',\n  stations: 'Show the black markers indicating the stations location.',\n  style: 'Change the color style of the map.'\n}\n\nconst ContainerAll = styled.div`\n  position: absolute;\n  top: ${props => props.heightNav}px;\n  left: 5px;\n  width: 20%;\n  min-width: 200px;\n  height: 40%;\n  z-index: 10000;\n  pointer-events: ${props => (props.show ? \"auto\" : \"none\")};\n`;\n\nContainerAll.propTypes = {\n  heightNav: PropTypes.number\n};\n\nconst ContainerSettings = styled.div`\n  background-color: hsla(0, 0%, 99%, 90%);\n  color: hsl(0, 0%, 20%);\n  z-index: 10000;\n  box-shadow: 0px 1px 5px hsl(0, 0%, 50%);\n  border-radius: 5px;\n  opacity: ${props => (props.show ? 1 : 0)};\n  transition: 0.2s ease-out;\n  padding: 5px 10px;\n  font-size: 16px;\n`;\n\nContainerSettings.propTypes = {\n  show: PropTypes.bool\n};\n\nconst ShowSettingsButton = styled(Button)`\n  margin: 5px;\n  font-size: 16px;\n  padding: 5px 10px;\n  font-weight: 600;\n  pointer-events: auto;\n  opacity: ${props => (props.hasLoaded ? 1 : 0)};\n  transition: 0.2s;\n`;\n\nconst HeaderParameter = styled.p`\n  font-weight: 600;\n`;\n\nconst Info = ({ text }) => {\n  const [showInfo, setShowInfo] = useState(false);\n  return (\n    <span style={{position:'relative'}} onMouseEnter={() => setShowInfo(true)} onMouseLeave={() => setShowInfo(false)}>\n      <img\n        src={infologo}\n        alt=\"info\"\n        width=\"16px\"\n        height=\"16px\"\n        style={{ verticalAlign: \"baseline\"}}\n      />\n      {showInfo && <InfoSpan text={text} />}\n    </span>\n  );\n};\n\nconst InfoSpan = ({ text }) => (\n  <span\n    style={{\n      display: 'inline-block',\n      background: \"hsl(0,0%,20%)\",\n      color: \"white\",\n      opacity: 0.9,\n      position: \"absolute\",\n      zIndex: 10000,\n      left: \"8px\",\n      bottom: \"8px\",\n      padding: \"5px\",\n      fontWeight:400,\n      fontSize: '14px',\n      width: '100vw',\n      maxWidth: '20vw',\n    }}\n  >\n    {text}\n  </span>\n);\n\nclass CommandPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSettings: false,\n      date: \"\",\n      time: \"\",\n      error: false\n    };\n    this.changeDate = this.changeDate.bind(this);\n  }\n\n  componentDidMount() {\n    // Get the last date available in backend to display as default in datetime picker.\n\n    fetch(URL+\"api/lastdate/\")\n      .then(res => res.json())\n      .then(res => {\n        const parsed = parseDate(new Date(res.time + \"Z\"));\n        this.setState({ date: parsed[0], time: parsed[1] });\n      });\n  }\n\n  changeDate() {\n    // Set the date to the value specified in the datetime input.\n    // Checks if value is available in backend. If yes, sets it in the parent component\n    // using the setTime method, otherwise show the error message.\n\n    const epoch =\n      new Date(this.state.date + \"T\" + this.state.time).getTime() / 1000;\n    fetch(URL+`api/measures/?start=${epoch}&end=${epoch}`)\n      .then(res => res.json())\n      .then(res => {\n        if (res.length > 0) {\n          this.props.setTime(this.state.date + \"T\" + this.state.time, false);\n          this.setState({ error: false });\n        } else {\n          this.setState({ error: true });\n        }\n      });\n  }\n\n  render() {\n    const {\n      parameter,\n      threeD,\n      scale3D,\n      opacity,\n      showStation,\n      mapStyle,\n      change,\n      hasLoaded\n    } = this.props;\n\n    const [maxDate, maxTime] = parseDate(new Date());\n    const paramList = PARAMS;\n\n    return (\n      <ContainerAll\n        heightNav={this.props.heightNav + 5}\n        show={this.state.showSettings}\n      >\n        <ShowSettingsButton\n          hasLoaded={hasLoaded}\n          primary\n          onClick={() =>\n            this.setState(prev => ({ showSettings: !prev.showSettings }))\n          }\n        >\n          Settings\n        </ShowSettingsButton>\n\n        <ContainerSettings show={this.state.showSettings}>\n          <HeaderParameter>\n            Parameter <Info text={texts.parameter} />\n          </HeaderParameter>\n          <Dropdown\n            options={paramList}\n            onChange={e => change(\"parameter\", e.value)}\n            value={parameter}\n            placeholder={parameter}\n          />\n\n          <HeaderParameter>Measurement time <Info text={texts.time} /></HeaderParameter>\n          <div>\n            <input\n              type=\"date\"\n              id=\"measurement-date\"\n              name=\"measurement-date\"\n              value={this.state.date}\n              min=\"2019-01-01\"\n              max={maxDate}\n              onChange={e => this.setState({ date: e.currentTarget.value })}\n            />\n\n            <input\n              type=\"time\"\n              id=\"measurement-type\"\n              name=\"measurement-date\"\n              value={this.state.time}\n              min=\"00:00\"\n              max={maxTime}\n              step=\"600\"\n              onChange={e => this.setState({ time: e.currentTarget.value })}\n            />\n            <div>\n              <button onClick={this.changeDate}>Set time</button>\n              <span style={{ marginLeft: \"5px\", color: \"red\" }}>\n                {this.state.error ? \"Not available\" : \"\"}\n              </span>\n            </div>\n          </div>\n\n          <HeaderParameter>3D <Info text={texts.threeD} /></HeaderParameter>\n          <div>\n            <input\n              type=\"radio\"\n              value=\"yes\"\n              checked={threeD}\n              onChange={e => change(\"threeD\", e.currentTarget.value === \"yes\")}\n            />\n            Yes\n            <input\n              type=\"radio\"\n              value=\"no\"\n              checked={!threeD}\n              onChange={e => change(\"threeD\", e.currentTarget.value === \"yes\")}\n            />\n            No\n            <input\n              css={`\n                opacity: ${threeD ? 1 : 0};\n              `}\n              type=\"range\"\n              min=\"1\"\n              max=\"50\"\n              value={scale3D}\n              onChange={e => change(\"scale3D\", parseInt(e.currentTarget.value))}\n              step=\"1\"\n              disabled={!threeD}\n            />\n          </div>\n\n          <HeaderParameter>Opacity <Info text={texts.opacity} /></HeaderParameter>\n          <div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"255\"\n              value={opacity}\n              onChange={e => change(\"opacity\", parseInt(e.currentTarget.value))}\n              step=\"1\"\n            />\n          </div>\n\n          <HeaderParameter>Show stations <Info text={texts.stations} /></HeaderParameter>\n          <div>\n            <input\n              type=\"radio\"\n              value=\"yes\"\n              checked={showStation}\n              onChange={e =>\n                change(\"showStation\", e.currentTarget.value === \"yes\")\n              }\n            />\n            Yes\n            <input\n              type=\"radio\"\n              value=\"no\"\n              checked={!showStation}\n              onChange={e =>\n                change(\"showStation\", e.currentTarget.value === \"yes\")\n              }\n            />\n            No\n          </div>\n\n          <HeaderParameter>Map style <Info text={texts.style} /></HeaderParameter>\n          <div>\n            <input\n              type=\"radio\"\n              value=\"light\"\n              checked={mapStyle === \"light\"}\n              onChange={e => change(\"mapStyle\", e.currentTarget.value)}\n            />\n            Light\n            <input\n              type=\"radio\"\n              value=\"dark\"\n              checked={mapStyle === \"dark\"}\n              onChange={e => change(\"mapStyle\", e.currentTarget.value)}\n            />\n            Dark\n            <input\n              type=\"radio\"\n              value=\"basic\"\n              checked={mapStyle === \"basic\"}\n              onChange={e => change(\"mapStyle\", e.currentTarget.value)}\n            />\n            Basic\n          </div>\n        </ContainerSettings>\n      </ContainerAll>\n    );\n  }\n}\n\nCommandPanel.propTypes = {\n  // Height of NavBar, used to display other stuff below NavBar.\n  heightNav: PropTypes.number,\n  // Parameter to display (e.g temperature, pressure,...)\n  parameter: PropTypes.string,\n  // If true, give z-coordinate to triangles corresponding to altitude.\n  threeD: PropTypes.bool,\n  // Gives the scale of the z-coordinates. More high it is, more high are peaks in map.\n  scale3D: PropTypes.number,\n  // Opacity of the map.\n  opacity: PropTypes.number,\n  // If true, show the station in the ScatterPlot layer.\n  showStation: PropTypes.bool,\n  // Map style (light, dark or basic).\n  mapStyle: PropTypes.string,\n  // Time at which to display the data.\n  time: PropTypes.instanceOf(Date),\n  // Function to set time in parent component.\n  setTime: PropTypes.func,\n  // Set state in parent component on given state parameter.\n  change: PropTypes.func\n};\n\nexport default CommandPanel;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Button } from './ShowMeasures.jsx'\n\nconst ShowTimeContainer = styled.div`\n  position: absolute;\n  z-index: 10000;\n  background-color: hsla(0,0%,99%,90%);\n  color: hsl(0,0%,20%);\n  box-shadow: 0px 1px 5px hsl(0,0%,50%);\n  border-radius: 5px;\n  top: ${props => props.height}px;;\n  right: 5px;\n  padding: 2px 5px;\n  font-size: 14px;\n  pointer-events: none;\n`;\n\nconst ModifiedButton = styled(Button)`\n  margin: 0px 0px;\n  font-size: 14px;\n  opacity: ${props => props.show ? 1 : 0};\n`;\n\nconst TimeDiv = styled.div`\n  opacity: ${props => props.show ? 1 : 0};\n`;\n\nconst ShowTime = ({height, time, updateTime}) => {\n  return (\n    <ShowTimeContainer height={height}>\n      <div style={{color:'hsl(0,0%,10%)',fontWeight:'600'}}>Time of measurements</div>\n      <TimeDiv show={time}>{time ? time.toLocaleString('en-ch'): '.'}</TimeDiv>\n      <div style={{display:'flex',alignItems:'center',justifyContent:'center'}}>\n        <ModifiedButton show={time} onClick={updateTime}>\n          Refresh\n        </ModifiedButton>\n      </div>\n    </ShowTimeContainer>\n  );\n}\n\nexport default ShowTime;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL, { PolygonLayer, ScatterplotLayer } from \"deck.gl\";\nimport Delaunator from \"delaunator\";\n\nimport { COLOR_MAP, UNITS, URL } from \"../utils/constants\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1Ijoid2lsbGlhbWJvcmdlYXVkIiwiYSI6ImNqcHgzdmp5azBpOTk0M2puZG51ZG5tM2oifQ.JmEQT7uJE0MrIZHIFjRIkg\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullStations: [],\n      stations: [],\n      isLoading: false,\n      data: [],\n      colorMap: COLOR_MAP[\"coolwarm\"],\n    };\n\n    this.mapRef = React.createRef();\n    this.deckRef = React.createRef();\n\n    this._renderLayers = this._renderLayers.bind(this);\n    this._renderTooltip = this._renderTooltip.bind(this);\n    this._getFillColor = this._getFillColor.bind(this);\n    this.setAllData = this.setAllData.bind(this);\n    this.fetchNewData = this.fetchNewData.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetch data from backend.\n\n    this.fetchNewData();\n  }\n\n  componentDidUpdate(prevProps) {\n    // Check if some props have changed.\n\n    if (prevProps.parameter !== this.props.parameter) {\n      // If the parameter has changed, change the data to remove stations not having this\n      // parameter and recompute Delaunay with new stations.\n      this.setAllData(this.state.fullStations, this.state.interpolData);\n      this.deckRef.current.deck.setProps({ layers: this._renderLayers() });\n    } else if (\n      prevProps.threeD !== this.props.threeD ||\n      prevProps.scale3D !== this.props.scale3D ||\n      prevProps.opacity !== this.props.opacity ||\n      prevProps.showStation !== this.props.showStation\n    ) {\n      // If 3D, scale3D, opacity, or showStations change, only recompute the layers to\n      // accomodate these changes.\n      this.deckRef.current.deck.setProps({ layers: this._renderLayers() });\n    } else if (\n      prevProps.time &&\n      prevProps.time.getTime() !== this.props.time.getTime()\n    ) {\n      // If time changes, fetch new data (specifying the time) and recompute layers with new data.\n      this.fetchNewData(false);\n      this.deckRef.current.deck.setProps({ layers: this._renderLayers() });\n    }\n  }\n\n  fetchNewData(lastmeasures = true) {\n    // Fetch data from backend. If lastmeasures is true, fetch the last 20 minutes of average data.\n    // Otherwise, fetch data with measurement time set to props.time and take the average of the last 20 minutes.\n    // Then fetch interpolated data which will be used to compute triangulation for smooth heatmaps.\n    // Then cal setAllData to compute Delaunay.\n\n    let url;\n    let time;\n    if (lastmeasures) {\n      // time = Math.round((new Date()).getTime() / 1000);\n\t time = 1593247341;\n      url = URL+`api/avgmeasures/?start=${time-20*60+10}&end=${time}`;\n    } else {\n      time = this.props.time.getTime() / 1000;\n      url = URL+`api/avgmeasures/?start=${time-20*60+10}&end=${time}`;\n    }\n    fetch(URL+\"api/stations/\")\n      .then(res => res.json())\n      .then(stations => {\n        fetch(url)\n          .then(res => res.json())\n          .then(mes => {\n            stations = stations.map(x => ({\n              ...x,\n              ...mes.filter(m => {\n                return m.station === x.id;\n              })[0]\n            }));\n            this.setState({ fullStations: stations });\n            fetch(URL+`api/interpol/?start=${time-20*60}&end=${time}`)\n              .then(res => res.json())\n              .then(res => {\n                this.props.change('hasLoaded', true);\n                this.setState({interpolData: res});\n                this.setAllData(stations, res);\n              })\n          });\n\n      });\n  }\n\n  setAllData(fullStations, interpolData) {\n    // Compute Delaunay triangulation for stations which display current props.parameter.\n\n    let stations = fullStations.filter(x => x[this.props.parameter] !== null);\n    stations = [...stations, ...interpolData.filter(x => x[this.props.parameter] !== null)]\n    const triangles = Delaunator.from(\n      stations.map(x => [x.longitude, x.latitude])\n    ).triangles;\n    const trianglesCoordinates = [];\n    for (let i = 0; i < triangles.length; i += 3) {\n      let [a,b,c] = [\n        stations[triangles[i]],\n        stations[triangles[i + 1]],\n        stations[triangles[i + 2]]\n      ];\n      // Only consider triangles where vertices are close together. This is make the heatmap \n      // have the shape of Switzerland (otherwise the triangulation cuts borders).\n      if ((Math.max(Math.abs(a.longitude-b.longitude),\n        Math.abs(a.longitude-c.longitude),\n        Math.abs(b.longitude-c.longitude))<0.1) &&\n      (Math.max(Math.abs(a.latitude-b.latitude),\n        Math.abs(a.latitude-c.latitude),\n        Math.abs(b.latitude-c.latitude))<0.1)) {\n\n      trianglesCoordinates.push([\n        stations[triangles[i]],\n        stations[triangles[i + 1]],\n        stations[triangles[i + 2]]\n      ]);\n    } }\n    const minMax = [\n      Math.min(...stations.map(x => x[this.props.parameter])),\n      Math.max(...stations.map(x => x[this.props.parameter]))\n    ];\n    this.setState({ stations, trianglesCoordinates, minMax });\n  }\n\n  _renderLayers() {\n    // Render the layers: 1st the polygon layer, displaying the triangulation with color at vertices\n    // given by value of the parameter at the station. 2nd the scatterplot layer showing the stations\n    // which can be hovered and clicked to display info on the station.\n\n    return [\n      new PolygonLayer({\n        id: \"polygon-layer\",\n        data: this.state.trianglesCoordinates,\n        pickable: true,\n        stroked: true,\n        filled: true,\n        wireframe: true,\n        elevationScale: this.props.scale3D,\n        lineWidthMinPixels: 1,\n        getPolygon: d =>\n          d.map(x =>\n            this.props.threeD\n              ? [x.longitude, x.latitude, x.altitude]\n              : [x.longitude, x.latitude]\n          ),\n        getFillColor: this._getFillColor,\n        getLineColor: [80, 80, 80, 0],\n        getLineWidth: 0,\n        zIndex: 1000,\n        updateTriggers: {\n          getFillColor: this.props.parameter,\n          getPolygon: [this.props.threeD, this.props.opacity],\n          elevationScale: this.props.scale3D\n        }\n      }),\n      new ScatterplotLayer({\n        id: \"scatter-layer\",\n        data: this.state.stations.filter(x => x.station), //points that are actually stations, not interpolated.\n        pickable: true,\n        radiusScale: this.props.showStation ? 2 : 0,\n        getPosition: d => [d.longitude, d.latitude],\n        getRadius: 500,\n        getFillColor: [10, 10, 10, 255],\n        getPolygonOffset: () => [0, -800000],\n        onHover: info =>\n          this.setState({\n            hoveredObject: info.object,\n            pointerX: info.x,\n            pointerY: info.y\n          }),\n        onClick: info => this.props.change('clickedStation',info.object),\n        getCursor: () => \"pointer\",\n        updateTriggers: {\n          instanceRadius: this.props.showStation\n        }\n      })\n    ];\n  }\n\n  _getFillColor(d) {\n    // Get the color in which to fill the triangles in the PolygonLayer. Depends on the parameter,\n    // opacity and colormap. Returns an array containing 3 RGBA values, one for each vertex of the triangle.\n    // Deck.gl creates the gradient in the triangle from these values.\n\n    const param = this.props.parameter;\n    const [min, max] = this.state.minMax;\n    let temp;\n    if (min===max) {\n      temp = d.map(x=>0);\n    } else {\n      temp = d.map(x => Math.floor((255 * (x[param] - min)) / (max - min)));\n    }\n    const opa = this.props.opacity;\n    const cm = COLOR_MAP[param === \"temperature\" ? \"coolwarm\" : \"plasma\"];\n    return [...cm[temp[0]], opa, ...cm[temp[1]], opa, ...cm[temp[2]], opa];\n  }\n\n  _renderTooltip() {\n    // Renders the tooltip for the hovered station. Display station name and measure of the parameter.\n\n    const { hoveredObject, pointerX, pointerY } = this.state || {};\n\n    return (\n      hoveredObject && (\n        <div\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            pointerEvents: \"none\",\n            left: pointerX,\n            top: pointerY,\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            color: \"white\",\n            padding: \"5px\"\n          }}\n        >\n          <div>{hoveredObject.name}</div>\n          <div>\n            {hoveredObject[this.props.parameter]} {UNITS[this.props.parameter]}\n          </div>\n        </div>\n      )\n    );\n  }\n\n  render() {\n    return (\n      <DeckGL\n        ref={this.deckRef}\n        layers={this._renderLayers()}\n        initialViewState={{\n          latitude: 47,\n          longitude: 8.2,\n          zoom: 7,\n          minZoom: 7,\n          maxZoom: 10,\n          pitch: 0,\n          bearing: 0\n        }}\n        width=\"100%\"\n        height=\"100%\"\n        controller={true}\n        getCursor={() => \"default\"}\n      >\n        <StaticMap\n          reuseMaps={true}\n          mapStyle={`mapbox://styles/mapbox/${this.props.mapStyle}-v9`}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          ref={map => (this.mapRef = map)}\n        />\n        {this._renderTooltip}\n      </DeckGL>\n    );\n  }\n}\n\nMap.propTypes = {\n  // Parameter to display (e.g temperature, pressure,...)\n  parameter: PropTypes.string,\n  // If true, give z-coordinate to triangles corresponding to altitude.\n  threeD: PropTypes.bool,\n  // Gives the scale of the z-coordinates. More high it is, more high are peaks in map.\n  scale3D: PropTypes.number,\n  // Function to set time in parent component.\n  setTime: PropTypes.func,\n  // Time at which to display the data.\n  time: PropTypes.instanceOf(Date),\n  // Function to set the clicked station, on which the information box is displayed.\n  setClickedStation: PropTypes.func,\n  // Opacity of the map.\n  opacity: PropTypes.number,\n  // If true, show the station in the ScatterPlot layer.\n  showStation: PropTypes.bool,\n  // Map style (light, dark or basic).\n  mapStyle: PropTypes.string\n};\n\nexport default Map;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  VictoryChart,\n  VictoryLine,\n  VictoryAxis,\n  VictoryLabel,\n  createContainer\n} from \"victory\";\n\nimport { UNITS, PRETTY_PARAMS } from \"../utils/constants\";\n\nconst [ORANGE, GREEN] = [\"rgb(218,124,48)\", \"rgb(62,150,81)\"];\n\nconst styles = {\n  axisX: {\n    axis: { stroke: \"black\", strokeWidth: 3 },\n    ticks: { strokeWidth: 0 },\n    tickLabels: { fill: \"black\", fontFamily: \"inherit\", fontSize: 7 }\n  },\n  axisYL: {\n    grid: {\n      stroke: \"hsla(0,0%,10%,15%)\",\n      strokeWidth: 2\n    },\n    axis: { stroke: ORANGE, strokeWidth: 3 },\n    ticks: { strokeWidth: 0 },\n    tickLabels: { fill: \"hsl(0,0%,40%)\", fontFamily: \"inherit\", fontSize: 10 }\n  },\n  axisYR: {\n    axis: { stroke: GREEN, strokeWidth: 3 },\n    ticks: { strokeWidth: 0 },\n    tickLabels: {\n      fill: \"hsl(0,0%,40%)\",\n      fontFamily: \"inherit\",\n      fontSize: 10\n    }\n  },\n  lineL: {\n    data: { stroke: ORANGE },\n    parent: { border: \"1px solid #ccc\", background: \"#ccdee8\" }\n  },\n  lineR: {\n    data: { stroke: GREEN },\n    parent: { border: \"1px solid #ccc\", background: \"#ccdee8\" }\n  }\n};\n\n// Returns the cursor (vertical bar following mouse on hover).\nconst getCursor = (data, parameterL, parameterR, showR) => {\n  return ({ x, y, active, text }) => {\n    const len = data.length;\n    const ind = Math.round(((x - 50) / 350) * (len - 1));\n    const found = data.find(val => (val.time >= text))\n    if (found == null) { return <g />}\n    const textAnchor = ind > len / 2 ? \"end\" : \"start\";\n    const offX = ind > len / 2 ? -5 : 5;\n    const offY = showR ? 14 : 0;\n    const [uL, uR] = [UNITS[parameterL], UNITS[parameterR]];\n    return (\n      <g>\n        <text\n          x={x + offX}\n          y={y - 28 - offY}\n          style={{\n            fill: \"hsl(0,0%,20%)\",\n            textAnchor,\n            fontWeight: \"500\",\n            fontSize: 12\n          }}\n        >{`${found.time.toLocaleDateString([], {\n          day: \"2-digit\",\n          month: \"2-digit\",\n          year: \"2-digit\"\n        })}`}</text>\n        <text\n          x={x + offX}\n          y={y - 14 - offY}\n          style={{\n            fill: \"hsl(0,0%,20%)\",\n            textAnchor,\n            fontWeight: \"500\",\n            fontSize: 12\n          }}\n        >{`${found.time.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        })}`}</text>\n        <text\n          x={x + offX}\n          y={y - offY}\n          style={{ textAnchor, fill: ORANGE, fontSize: 12 }}\n        >{`${found[parameterL].toFixed(2)}${uL}`}</text>\n        {showR && \n        <text\n          x={x + offX}\n          y={y}\n          style={{ textAnchor, fill: GREEN, fontSize: 12 }}\n        >{`${found[parameterR].toFixed(2)}${uR}`}</text> }\n        <path\n          d={`M${x},250 L${x},50`}\n          style={{ strokeWidth: 1, stroke: \"hsl(0,0%,40%)\" }}\n        />\n      </g>\n    );\n  };\n};\n\nconst Null = () => null;\n\nconst ChartContainer = createContainer(\"zoom\", \"cursor\");\n\nconst GraphComp = ({ data, parameterL, parameterR, minmax, showR }) => {\n  const Cursor = getCursor(data, parameterL, parameterR, showR);\n\n  return (\n    <VictoryChart\n      scale={{x:'time'}}\n      animate={{\n        duration: 500,\n        onLoad: { duration: 500 }\n      }}\n      style={{\n        parent: {\n          background: \"#ccdee8\",\n          boxShadow: '0px 0px 10px'\n        }\n      }}\n      containerComponent={\n        <ChartContainer\n          cursorLabel={d => d.x}\n          cursorLabelComponent={<Cursor />}\n          cursorLabelOffset={0}\n          cursorComponent={<Null />}\n        />\n      }\n      width={450}\n      height={300}\n    >\n      <VictoryLabel\n        x={25}\n        y={25}\n        text={`${PRETTY_PARAMS[parameterL]} \\n ${UNITS[parameterL]}`}\n        style={{ fontSize: 12, fill: ORANGE }}\n      />\n      {showR && \n      <VictoryLabel\n        x={370}\n        y={25}\n        text={`${PRETTY_PARAMS[parameterR]} \\n ${UNITS[parameterR]}`}\n        style={{ fontSize: 12, fill: GREEN }}\n      /> }\n\n      <VictoryAxis\n        scale=\"time\"\n        style={styles.axisX}\n        tickCount={11}\n        offsetY={50}\n      />\n\n      <VictoryAxis\n        dependentAxis\n        style={styles.axisYL}\n        orientation=\"left\"\n        tickValues={[0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1]}\n        tickFormat={t =>\n          parseFloat(\n            (\n              minmax[parameterL][0] +\n              t * (minmax[parameterL][1] - minmax[parameterL][0])\n            ).toFixed(2)\n          )\n        }\n      />\n\n      <VictoryLine\n        style={styles.lineL}\n        domain={{ y: [-0.1, 1.1] }}\n        data={data}\n        x=\"time\"\n        y={d =>\n          (d[parameterL] - minmax[parameterL][0]) /\n          (minmax[parameterL][1] - minmax[parameterL][0])\n        }\n        interpolation=\"linear\"\n      />\n\n      {showR && (\n        <VictoryAxis\n          dependentAxis\n          style={styles.axisYR}\n          orientation=\"right\"\n          tickValues={[0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1]}\n          // Re-scale ticks by multiplying by correct maxima\n          tickFormat={t =>\n            parseFloat(\n              (\n                minmax[parameterR][0] +\n                t * (minmax[parameterR][1] - minmax[parameterR][0])\n              ).toFixed(2)\n            )\n          }\n        />\n      )}\n\n      {showR && (\n        <VictoryLine\n          style={styles.lineR}\n          domain={{ y: [-0.1, 1.1] }}\n          data={data}\n          x=\"time\"\n          y={d =>\n            (d[parameterR] - minmax[parameterR][0]) /\n            (minmax[parameterR][1] - minmax[parameterR][0])\n          }\n          interpolation=\"linear\"\n        />\n      )}\n    </VictoryChart>\n  );\n};\n\nGraphComp.propTypes = {\n  // Data of the station to plot.\n  data: PropTypes.array,\n  // Parameter to plot on the left axis.\n  parameterL: PropTypes.string,\n  // Parameter to plot on the right axis.\n  parameterR: PropTypes.string,\n  // Array containing the min and max for each parameter, so that we ca scale the data.\n  minmax: PropTypes.object,\n  // If true show the second parameter, else don't.\n  showR: PropTypes.bool\n};\n\nexport default GraphComp;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\n\nimport GraphComp from \"./Graphs.jsx\";\nimport { Button } from \"./ShowMeasures.jsx\";\nimport { PARAMS, URL, TIME_PARAMS } from \"../utils/constants\";\n\nconst ContainerDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  height: ${props =>\n    props.height ? \"calc(79vh - \" + props.height + \"px)\" : \"100vh\"};\n  max-width: 100%;\n  max-height: 50vw;\n  margin-top: ${props => props.height || 0}px;\n  margin-bottom: ${props => props.height || 0}px;\n`;\n\nContainerDiv.propTypes = {\n  // Height of NavBar\n  height: PropTypes.number\n};\n\nconst styles = {\n  paramColumn: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    margin: \"0px 30px\"\n  },\n  stationName: {\n    fontSize: 25,\n    fontWeight: 500,\n    color: \"hsl(0,0%,10%)\",\n    margin: \"10px 0px\"\n  },\n  timeInterval: {\n    color: \"hsl(0, 0%, 20%)\",\n    fontWeight: 700,\n    margin: \"10px 0px\"\n  },\n  firstParam: {\n    color: \"hsl(27, 70%, 52%)\",\n    fontWeight: 700,\n    margin: \"10px 0px\"\n  },\n  secondParam: {\n    color: \"hsl(133, 41%, 41%)\",\n    fontWeight: 700,\n    margin: \"10px 0px\"\n  },\n  button: {\n    marginTop: \"20px\"\n  }\n};\n\nclass Graphs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      minmax: {},\n      parameterL: \"\",\n      parameterR: \"\",\n      okParams: [],\n      showR: true,\n      timeInterval: 86400,\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.clickedStation.station) {\n      this.fetchData();\n    }\n    window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      !prevProps.clickedStation ||\n      prevProps.clickedStation.station !== this.props.clickedStation.station\n    ) {\n      this.fetchData();\n      this.setState({ showR: true });\n    }\n    if(prevState.timeInterval !== this.state.timeInterval) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    // Fetch data to plot\n\n    const { clickedStation: station } = this.props;\n    const { timeInterval } = this.state;\n    const time = Math.round((new Date()).getTime() / 1000);\n    const station_id = station.station;\n    // Fetch for timeInterval duration. If more than one day, fetch hourly measures.\n    const apiEndPoint = timeInterval>86400 ? 'hourlymeasures' : 'measures';\n    const url = URL+`api/${apiEndPoint}/?station=${station_id}&start=${time -\n      timeInterval}&end=${time}`;\n    fetch(url)\n      .then(res => res.json())\n      .then(res => {\n        res.forEach(x => {\n          x.time = new Date(x.time + \"Z\"); // Convert to Date object.\n        });\n        // minmax contains min and max for each parameter. Allows to rescale data to [0,1].\n        const minmax = {};\n        PARAMS.forEach(p => {\n          minmax[p.value] = [\n            Math.min(\n              ...res.filter(d => d[p.value] !== null).map(d => d[p.value])\n            ),\n            Math.max(\n              ...res.filter(d => d[p.value] !== null).map(d => d[p.value])\n            )\n          ];\n          const [a, b] = minmax[p.value];\n          // If a or b is infinite (eg a=Math.min()) replace by [-0.1,0.1].\n          if (!isFinite(a) || !isFinite(b)) {\n            minmax[p.value] = [-0.1, 0.1];\n          }\n          // If a==b (eg constant precipitation), replace by extended values (to avoid divison by 0).\n          if (a === b) {\n            minmax[p.value] = [\n              a - 0.1 * Math.abs(a + 1),\n              b + 0.1 * Math.abs(b + 1)\n            ];\n          }\n        });\n        return [res, minmax];\n      })\n      .then(([data, minmax]) => {\n        // okParams contains params available at this station.\n        const okParams = PARAMS.filter(p => data[0][p.value] !== null);\n        // Pick first two available parameters as left and right params.\n        const [parameterL, parameterR] = [okParams[0].value, okParams[1].value];\n        this.setState({ data, minmax, parameterL, parameterR, okParams });\n      });\n  }\n\n  render() {\n    let { data, minmax, parameterL, parameterR, okParams, showR } = this.state;\n    data = data.filter(x => x[parameterL] !== null && x[parameterR] !== null);\n    if (!minmax[parameterL] || !minmax[parameterR]) {\n      minmax[parameterL] = [-20, 40];\n      minmax[parameterR] = [0, 100];\n    }\n    return (\n      <ContainerDiv height={this.props.heightNav}>\n        <div style={{ padding: \"4px 40px\", flexGrow: 1 }}>\n          {data[0] && (\n            <GraphComp\n              data={data}\n              parameterL={parameterL}\n              parameterR={parameterR}\n              minmax={minmax}\n              showR={showR}\n            />\n          )}\n        </div>\n        <div style={styles.paramColumn}>\n          <div style={styles.stationName}>{this.props.clickedStation.name}</div>\n\n          <div style={styles.timeInterval}>Time interval</div>\n          <Dropdown\n            options={TIME_PARAMS}\n            value={this.state.timeInterval.toString()}\n            onChange={e => this.setState({timeInterval:parseInt(e.value)})}\n          />\n\n          <div style={styles.firstParam}>First parameter</div>\n          <Dropdown\n            options={okParams}\n            onChange={e => this.setState({ parameterL: e.value })}\n            value={parameterL}\n            placeholder={parameterL}\n          />\n\n          <div style={styles.secondParam}>Second parameter</div>\n          <Dropdown\n            options={[...okParams, { value: \"none\", label: \"None\" }]}\n            onChange={e => {\n              if (e.value === \"none\") {\n                this.setState({ showR: false });\n              } else {\n                this.setState({ parameterR: e.value, showR: true });\n              }\n            }}\n            value={ showR ? parameterR: 'none'}\n            placeholder={parameterR}\n          />\n          <Button\n            color=\"hsl(0, 70%, 30%)\"\n            style={styles.button}\n            onClick={e => this.props.change(\"showGraphs\", false)}\n          >\n            Close\n          </Button>\n        </div>\n      </ContainerDiv>\n    );\n  }\n}\n\nGraphs.propTypes = {\n  // Height of NavBar.\n  heightNav: PropTypes.number,\n  // Clicked station on which to display graphs.\n  clickedStation: PropTypes.object,\n  // Set state in parent component on given state parameter.\n  change: PropTypes.func\n};\n\nexport default Graphs;\n","import React from \"react\";\nimport ReactModal from \"react-modal\";\n\nimport { Button } from './ShowMeasures.jsx';\n\nconst styles = {\n  title: {\n    flex:'1',\n    fontWeight:700,\n    fontSize: '30px', \n    textAlign:'center',\n    color:'hsl(200,100%,50%)'\n  },\n  parag: {\n    flex: '1',\n    fontSize: '20px',\n    margin: '10px auto 10px',\n    textAlign: 'center'\n  },\n  button: {\n    flex: '0',\n    fontSize: '20px',\n    margin: '0px auto 0px',\n  }\n}\n\nconst WelcomeModal = ({ showModal, change }) => (\n  <ReactModal\n    style={{\n      overlay: { zIndex: 1000000 },\n      content: {\n        width: \"50vw\",\n        height: \"50vh\",\n        margin: \"auto auto\",\n        background: \"hsl(190, 100%, 99%)\",\n        color: \"hsl(0,0%,20%)\",\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n      }\n    }}\n    isOpen={showModal}\n    contentLabel=\"Minimal Modal Example\"\n    ariaHideApp={false}\n  >\n    <div style={styles.title}> Welcome to the DATECO demo</div>\n    <div style={styles.parag}>\n      We provide an analytics platform for real-time environmental data from over 150 weather stations across Switzerland.\n    </div>\n    <div style={styles.parag}>\n      Click on any station to get detailed information, as well as graphs of the last 24 hours of data.\n    </div>\n    <div style={styles.parag}>\n      The map is displayed in 3D! Press Ctrl (Cmd on Mac) and move the map with your mouse to change the 3D perspective.\n    </div>\n    <div style={{...styles.parag,color:'rgb(216, 0, 12)', fontSize:'14px'}}>\n      The demo does not yet work properly on mobile devices. For a better experience, please visit on a computer.\n    </div>\n    <div style={styles.button}>\n      <Button onClick={() => change(\"showModal\", false)}>\n        Go to Demo\n      </Button>\n    </div>\n  </ReactModal>\n);\n\nexport default WelcomeModal;\n","import React, { Component } from \"react\";\n\nimport { GlobalStyles } from \"./SwissApp.jsx\";\nimport NavBar from \"./components/NavBar.jsx\";\nimport CommandPanel from \"./components/CommandPanel.jsx\";\nimport ShowTime from \"./components/ShowTime.jsx\";\nimport ShowMeasures from \"./components/ShowMeasures.jsx\";\nimport Map from \"./components/Map.jsx\";\nimport Graphs from \"./components/GraphContainer.jsx\";\nimport WelcomeModal from \"./components/WelcomeModal.jsx\";\nimport { URL } from './utils/constants';\n// const Graphs = React.lazy(() => import('./components/Graphs.jsx'));\n\nconst getModal = () => {\n  if (localStorage.getItem('visitedBefore') !== null) {\n    return false;\n  } else {\n    localStorage.setItem('visitedBefore',1);\n    return true;\n  }\n}\n\nexport default class Platform extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: getModal(),\n      time: null,\n      heightNav: 0,\n      parameter: \"temperature\",\n      threeD: true,\n      scale3D: 8,\n      opacity: 200,\n      showStation: true,\n      mapStyle: \"dark\",\n      clickedStation: {},\n      showGraphs: false,\n      hasLoaded: false\n    };\n    this.setTime = this.setTime.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n    this.refNav = React.createRef();\n    this.change = this.change.bind(this);\n  }\n\n  componentDidMount() {\n    // Set the height of the NavBar and fetch latest time of measurement.\n\n    this.setState({ heightNav: this.refNav.offsetHeight });\n    this.updateTime();\n  }\n\n  setTime(t, z = true) {\n    // Set the time given the string t in the format of the backend.\n    // If z is true, time is utc. Otherwise, time is local.\n\n    if (z) {\n      t = new Date(t + \"Z\");\n    } else {\n      t = new Date(t);\n    }\n    this.setState({ time: t });\n  }\n\n  updateTime() {\n    // Fetch latest time of measurement in backend and setState on it.\n\n    fetch(URL+\"api/lastdate/\")\n      .then(res => res.json())\n      .then(x => this.setTime(x.time));\n  }\n\n  change(key, value) {\n    // Sets state on given key-value pair.\n    \n    this.setState({ [key]: value });\n  }\n\n  render() {\n    const {\n      time,\n      heightNav,\n      parameter,\n      threeD,\n      scale3D,\n      opacity,\n      showStation,\n      mapStyle,\n      clickedStation,\n      showGraphs,\n      hasLoaded,\n      showModal\n    } = this.state;\n    return (\n      <>\n        <GlobalStyles />\n\n        <NavBar\n          addRef={ref => (this.refNav = ref)}\n          alwaysDisplay\n          notHome\n          demo\n          change={this.change}\n        />\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            width: \"100%\",\n            height: \"100vh\",\n            alignItems: \"stretch\",\n            margin: \"0px auto\"\n          }}\n        >\n          {/* Small vertical band on the left of the map */}\n          <div style={{ width: \"10px\", height: \"100vh\" }} />\n\n          <div\n            style={{\n              flex: \"1 1 auto\",\n              position: \"relative\",\n              maxHeight: \"99.9%\",\n              boxShadow: \"0px 0px 10px \"\n            }}\n          >\n            <CommandPanel\n              heightNav={heightNav}\n              parameter={parameter}\n              threeD={threeD}\n              scale3D={scale3D}\n              opacity={opacity}\n              showStation={showStation}\n              mapStyle={mapStyle}\n              time={time}\n              setTime={this.setTime}\n              change={this.change}\n              hasLoaded={hasLoaded}\n            />\n\n            <Map\n              parameter={parameter}\n              threeD={threeD}\n              scale3D={scale3D}\n              setTime={this.setTime}\n              time={time}\n              change={this.change}\n              opacity={opacity}\n              showStation={showStation}\n              mapStyle={mapStyle}\n            />\n\n            <ShowTime\n              height={heightNav + 5}\n              time={time}\n              updateTime={this.updateTime}\n            />\n            <ShowMeasures\n              station={clickedStation}\n              change={this.change}\n              showGraphs={showGraphs}\n            />\n          </div>\n          <WelcomeModal showModal={showModal} change={this.change}/>\n          {/* Small vertical band on the right of the map */}\n          <div style={{ width: \"10px\", height: \"100vh\" }} />\n        </div>\n        {showGraphs && clickedStation && (\n          <Graphs\n            clickedStation={clickedStation}\n            heightNav={heightNav}\n            change={this.change}\n          />\n        )}\n      </>\n    );\n  }\n}\n","const COLOR_MAP = {\n  jet: require('../data/jetcolormap.json'),\n  coolwarm: require('../data/coolwarmcolormap.json'),\n  plasma: require('../data/plasmacolormap.json'),\n}\n\nconst UNITS = {\n  'temperature': '°C',\n  'pressure_altitude': 'hPa',\n  'pressure_qnh': 'hPa',\n  'humidity': '%',\n  'wind_mean_speed': 'km/h',\n  'wind_max_speed': 'km/h',\n  'rain': 'mm',\n  'altitude': 'm'\n}\n\nconst PARAMS = [\n  {value:'temperature', label: 'Temperature'},\n  {value:'pressure_altitude', label: 'Pressure'},\n  {value:'pressure_qnh', label: 'Adjusted Pressure'},\n  {value:'humidity', label: 'Humidity'},\n  {value:'wind_mean_speed', label: 'Mean wind speed'},\n  {value:'wind_max_speed', label: 'Maximum wind speed'},\n  {value:'rain', label: 'Precipitation'},\n]\n\nconst PARAMS_W_ALT = [...PARAMS, {value:'altitude', label: 'Altitude'}];\n\nconst PRETTY_PARAMS = {\n  temperature: 'Temperature',\n  pressure_altitude: 'Pressure',\n  pressure_qnh: 'Adjusted Pressure',\n  humidity: 'Humidity',\n  wind_mean_speed: 'Mean wind speed',\n  wind_max_speed: 'Maximum wind speed',\n  rain: 'Precipitation',\n  altitude: 'Altitude',\n}\n\nconst TIME_PARAMS = [\n  {value: '3600', label: 'Last hour'},\n  {value: '86400', label: 'Last day'},\n  {value: '604800', label: 'Last week'},\n  {value: '2592000', label: 'Last month'},\n]\n\nexport { COLOR_MAP, UNITS, PARAMS, PARAMS_W_ALT, PRETTY_PARAMS, TIME_PARAMS };\n\n\nexport const URL = 'https://dateco.tk/';\n\n"],"sourceRoot":""}